#include "../luabindings.h"
#include "../defs/AtkParam.h"

namespace paramadjuster::params {

void registerAtkParam(sol::state *state, sol::table &paramsTable) {
    auto delayInit = [state, &paramsTable]() {
        if (sol::optional<sol::table> usertype = (*state)["AtkParam"]; usertype) return;
        auto indexerAtkParam = state->new_usertype<ParamTableIndexer<AtkParam>>("AtkParamTableIndexer");
        indexerAtkParam["count"] = sol::property(&ParamTableIndexer<AtkParam>::count);
        indexerAtkParam["__index"] = &ParamTableIndexer<AtkParam>::at;
        indexerAtkParam["id"] = &ParamTableIndexer<AtkParam>::paramId;
        indexerAtkParam["get"] = &ParamTableIndexer<AtkParam>::get;
        auto utAtkParam = state->new_usertype<AtkParam>("AtkParam");
        utAtkParam["hit0_Radius"] = &AtkParam::hit0_Radius;
        utAtkParam["hit1_Radius"] = &AtkParam::hit1_Radius;
        utAtkParam["hit2_Radius"] = &AtkParam::hit2_Radius;
        utAtkParam["hit3_Radius"] = &AtkParam::hit3_Radius;
        utAtkParam["knockbackDist"] = &AtkParam::knockbackDist;
        utAtkParam["hitStopTime"] = &AtkParam::hitStopTime;
        utAtkParam["spEffectId0"] = &AtkParam::spEffectId0;
        utAtkParam["spEffectId1"] = &AtkParam::spEffectId1;
        utAtkParam["spEffectId2"] = &AtkParam::spEffectId2;
        utAtkParam["spEffectId3"] = &AtkParam::spEffectId3;
        utAtkParam["spEffectId4"] = &AtkParam::spEffectId4;
        utAtkParam["hit0_DmyPoly1"] = &AtkParam::hit0_DmyPoly1;
        utAtkParam["hit1_DmyPoly1"] = &AtkParam::hit1_DmyPoly1;
        utAtkParam["hit2_DmyPoly1"] = &AtkParam::hit2_DmyPoly1;
        utAtkParam["hit3_DmyPoly1"] = &AtkParam::hit3_DmyPoly1;
        utAtkParam["hit0_DmyPoly2"] = &AtkParam::hit0_DmyPoly2;
        utAtkParam["hit1_DmyPoly2"] = &AtkParam::hit1_DmyPoly2;
        utAtkParam["hit2_DmyPoly2"] = &AtkParam::hit2_DmyPoly2;
        utAtkParam["hit3_DmyPoly2"] = &AtkParam::hit3_DmyPoly2;
        utAtkParam["blowingCorrection"] = &AtkParam::blowingCorrection;
        utAtkParam["atkPhysCorrection"] = &AtkParam::atkPhysCorrection;
        utAtkParam["atkMagCorrection"] = &AtkParam::atkMagCorrection;
        utAtkParam["atkFireCorrection"] = &AtkParam::atkFireCorrection;
        utAtkParam["atkThunCorrection"] = &AtkParam::atkThunCorrection;
        utAtkParam["atkStamCorrection"] = &AtkParam::atkStamCorrection;
        utAtkParam["guardAtkRateCorrection"] = &AtkParam::guardAtkRateCorrection;
        utAtkParam["guardBreakCorrection"] = &AtkParam::guardBreakCorrection;
        utAtkParam["atkThrowEscapeCorrection"] = &AtkParam::atkThrowEscapeCorrection;
        utAtkParam["subCategory1"] = &AtkParam::subCategory1;
        utAtkParam["subCategory2"] = &AtkParam::subCategory2;
        utAtkParam["atkPhys"] = &AtkParam::atkPhys;
        utAtkParam["atkMag"] = &AtkParam::atkMag;
        utAtkParam["atkFire"] = &AtkParam::atkFire;
        utAtkParam["atkThun"] = &AtkParam::atkThun;
        utAtkParam["atkStam"] = &AtkParam::atkStam;
        utAtkParam["guardAtkRate"] = &AtkParam::guardAtkRate;
        utAtkParam["guardBreakRate"] = &AtkParam::guardBreakRate;
        utAtkParam["isEnableCalcDamageForBushesObj"] = &AtkParam::isEnableCalcDamageForBushesObj;
        utAtkParam["atkThrowEscape"] = &AtkParam::atkThrowEscape;
        utAtkParam["atkObj"] = &AtkParam::atkObj;
        utAtkParam["guardStaminaCutRate"] = &AtkParam::guardStaminaCutRate;
        utAtkParam["guardRate"] = &AtkParam::guardRate;
        utAtkParam["throwTypeId"] = &AtkParam::throwTypeId;
        utAtkParam["hit0_hitType"] = &AtkParam::hit0_hitType;
        utAtkParam["hit1_hitType"] = &AtkParam::hit1_hitType;
        utAtkParam["hit2_hitType"] = &AtkParam::hit2_hitType;
        utAtkParam["hit3_hitType"] = &AtkParam::hit3_hitType;
        utAtkParam["hti0_Priority"] = &AtkParam::hti0_Priority;
        utAtkParam["hti1_Priority"] = &AtkParam::hti1_Priority;
        utAtkParam["hti2_Priority"] = &AtkParam::hti2_Priority;
        utAtkParam["hti3_Priority"] = &AtkParam::hti3_Priority;
        utAtkParam["dmgLevel"] = &AtkParam::dmgLevel;
        utAtkParam["mapHitType"] = &AtkParam::mapHitType;
        utAtkParam["guardCutCancelRate"] = &AtkParam::guardCutCancelRate;
        utAtkParam["atkAttribute"] = &AtkParam::atkAttribute;
        utAtkParam["spAttribute"] = &AtkParam::spAttribute;
        utAtkParam["atkType"] = &AtkParam::atkType;
        utAtkParam["atkMaterial"] = &AtkParam::atkMaterial;
        utAtkParam["guardRangeType"] = &AtkParam::guardRangeType;
        utAtkParam["defSeMaterial1"] = &AtkParam::defSeMaterial1;
        utAtkParam["hitSourceType"] = &AtkParam::hitSourceType;
        utAtkParam["throwFlag"] = &AtkParam::throwFlag;
        utAtkParam["disableGuard"] = sol::property([](AtkParam &param) -> uint8_t { return param.disableGuard; }, [](AtkParam &param, uint8_t value) { param.disableGuard = value; });
        utAtkParam["disableStaminaAttack"] = sol::property([](AtkParam &param) -> uint8_t { return param.disableStaminaAttack; }, [](AtkParam &param, uint8_t value) { param.disableStaminaAttack = value; });
        utAtkParam["disableHitSpEffect"] = sol::property([](AtkParam &param) -> uint8_t { return param.disableHitSpEffect; }, [](AtkParam &param, uint8_t value) { param.disableHitSpEffect = value; });
        utAtkParam["IgnoreNotifyMissSwingForAI"] = sol::property([](AtkParam &param) -> uint8_t { return param.IgnoreNotifyMissSwingForAI; }, [](AtkParam &param, uint8_t value) { param.IgnoreNotifyMissSwingForAI = value; });
        utAtkParam["repeatHitSfx"] = sol::property([](AtkParam &param) -> uint8_t { return param.repeatHitSfx; }, [](AtkParam &param, uint8_t value) { param.repeatHitSfx = value; });
        utAtkParam["isArrowAtk"] = sol::property([](AtkParam &param) -> uint8_t { return param.isArrowAtk; }, [](AtkParam &param, uint8_t value) { param.isArrowAtk = value; });
        utAtkParam["isGhostAtk"] = sol::property([](AtkParam &param) -> uint8_t { return param.isGhostAtk; }, [](AtkParam &param, uint8_t value) { param.isGhostAtk = value; });
        utAtkParam["isDisableNoDamage"] = sol::property([](AtkParam &param) -> uint8_t { return param.isDisableNoDamage; }, [](AtkParam &param, uint8_t value) { param.isDisableNoDamage = value; });
        utAtkParam["atkPow_forSfx"] = &AtkParam::atkPow_forSfx;
        utAtkParam["atkDir_forSfx"] = &AtkParam::atkDir_forSfx;
        utAtkParam["opposeTarget"] = sol::property([](AtkParam &param) -> uint8_t { return param.opposeTarget; }, [](AtkParam &param, uint8_t value) { param.opposeTarget = value; });
        utAtkParam["friendlyTarget"] = sol::property([](AtkParam &param) -> uint8_t { return param.friendlyTarget; }, [](AtkParam &param, uint8_t value) { param.friendlyTarget = value; });
        utAtkParam["selfTarget"] = sol::property([](AtkParam &param) -> uint8_t { return param.selfTarget; }, [](AtkParam &param, uint8_t value) { param.selfTarget = value; });
        utAtkParam["isCheckDoorPenetration"] = sol::property([](AtkParam &param) -> uint8_t { return param.isCheckDoorPenetration; }, [](AtkParam &param, uint8_t value) { param.isCheckDoorPenetration = value; });
        utAtkParam["isVsRideAtk"] = sol::property([](AtkParam &param) -> uint8_t { return param.isVsRideAtk; }, [](AtkParam &param, uint8_t value) { param.isVsRideAtk = value; });
        utAtkParam["isAddBaseAtk"] = sol::property([](AtkParam &param) -> uint8_t { return param.isAddBaseAtk; }, [](AtkParam &param, uint8_t value) { param.isAddBaseAtk = value; });
        utAtkParam["excludeThreatLvNotify"] = sol::property([](AtkParam &param) -> uint8_t { return param.excludeThreatLvNotify; }, [](AtkParam &param, uint8_t value) { param.excludeThreatLvNotify = value; });
        utAtkParam["atkBehaviorId"] = &AtkParam::atkBehaviorId;
        utAtkParam["atkPow_forSe"] = &AtkParam::atkPow_forSe;
        utAtkParam["atkSuperArmor"] = &AtkParam::atkSuperArmor;
        utAtkParam["decalId1"] = &AtkParam::decalId1;
        utAtkParam["decalId2"] = &AtkParam::decalId2;
        utAtkParam["AppearAiSoundId"] = &AtkParam::AppearAiSoundId;
        utAtkParam["HitAiSoundId"] = &AtkParam::HitAiSoundId;
        utAtkParam["HitRumbleId"] = &AtkParam::HitRumbleId;
        utAtkParam["HitRumbleIdByNormal"] = &AtkParam::HitRumbleIdByNormal;
        utAtkParam["HitRumbleIdByMiddle"] = &AtkParam::HitRumbleIdByMiddle;
        utAtkParam["HitRumbleIdByRoot"] = &AtkParam::HitRumbleIdByRoot;
        utAtkParam["traceSfxId0"] = &AtkParam::traceSfxId0;
        utAtkParam["traceDmyIdHead0"] = &AtkParam::traceDmyIdHead0;
        utAtkParam["traceDmyIdTail0"] = &AtkParam::traceDmyIdTail0;
        utAtkParam["traceSfxId1"] = &AtkParam::traceSfxId1;
        utAtkParam["traceDmyIdHead1"] = &AtkParam::traceDmyIdHead1;
        utAtkParam["traceDmyIdTail1"] = &AtkParam::traceDmyIdTail1;
        utAtkParam["traceSfxId2"] = &AtkParam::traceSfxId2;
        utAtkParam["traceDmyIdHead2"] = &AtkParam::traceDmyIdHead2;
        utAtkParam["traceDmyIdTail2"] = &AtkParam::traceDmyIdTail2;
        utAtkParam["traceSfxId3"] = &AtkParam::traceSfxId3;
        utAtkParam["traceDmyIdHead3"] = &AtkParam::traceDmyIdHead3;
        utAtkParam["traceDmyIdTail3"] = &AtkParam::traceDmyIdTail3;
        utAtkParam["traceSfxId4"] = &AtkParam::traceSfxId4;
        utAtkParam["traceDmyIdHead4"] = &AtkParam::traceDmyIdHead4;
        utAtkParam["traceDmyIdTail4"] = &AtkParam::traceDmyIdTail4;
        utAtkParam["traceSfxId5"] = &AtkParam::traceSfxId5;
        utAtkParam["traceDmyIdHead5"] = &AtkParam::traceDmyIdHead5;
        utAtkParam["traceDmyIdTail5"] = &AtkParam::traceDmyIdTail5;
        utAtkParam["traceSfxId6"] = &AtkParam::traceSfxId6;
        utAtkParam["traceDmyIdHead6"] = &AtkParam::traceDmyIdHead6;
        utAtkParam["traceDmyIdTail6"] = &AtkParam::traceDmyIdTail6;
        utAtkParam["traceSfxId7"] = &AtkParam::traceSfxId7;
        utAtkParam["traceDmyIdHead7"] = &AtkParam::traceDmyIdHead7;
        utAtkParam["traceDmyIdTail7"] = &AtkParam::traceDmyIdTail7;
        utAtkParam["hit4_Radius"] = &AtkParam::hit4_Radius;
        utAtkParam["hit5_Radius"] = &AtkParam::hit5_Radius;
        utAtkParam["hit6_Radius"] = &AtkParam::hit6_Radius;
        utAtkParam["hit7_Radius"] = &AtkParam::hit7_Radius;
        utAtkParam["hit8_Radius"] = &AtkParam::hit8_Radius;
        utAtkParam["hit9_Radius"] = &AtkParam::hit9_Radius;
        utAtkParam["hit10_Radius"] = &AtkParam::hit10_Radius;
        utAtkParam["hit11_Radius"] = &AtkParam::hit11_Radius;
        utAtkParam["hit12_Radius"] = &AtkParam::hit12_Radius;
        utAtkParam["hit13_Radius"] = &AtkParam::hit13_Radius;
        utAtkParam["hit14_Radius"] = &AtkParam::hit14_Radius;
        utAtkParam["hit15_Radius"] = &AtkParam::hit15_Radius;
        utAtkParam["hit4_DmyPoly1"] = &AtkParam::hit4_DmyPoly1;
        utAtkParam["hit5_DmyPoly1"] = &AtkParam::hit5_DmyPoly1;
        utAtkParam["hit6_DmyPoly1"] = &AtkParam::hit6_DmyPoly1;
        utAtkParam["hit7_DmyPoly1"] = &AtkParam::hit7_DmyPoly1;
        utAtkParam["hit8_DmyPoly1"] = &AtkParam::hit8_DmyPoly1;
        utAtkParam["hit9_DmyPoly1"] = &AtkParam::hit9_DmyPoly1;
        utAtkParam["hit10_DmyPoly1"] = &AtkParam::hit10_DmyPoly1;
        utAtkParam["hit11_DmyPoly1"] = &AtkParam::hit11_DmyPoly1;
        utAtkParam["hit12_DmyPoly1"] = &AtkParam::hit12_DmyPoly1;
        utAtkParam["hit13_DmyPoly1"] = &AtkParam::hit13_DmyPoly1;
        utAtkParam["hit14_DmyPoly1"] = &AtkParam::hit14_DmyPoly1;
        utAtkParam["hit15_DmyPoly1"] = &AtkParam::hit15_DmyPoly1;
        utAtkParam["hit4_DmyPoly2"] = &AtkParam::hit4_DmyPoly2;
        utAtkParam["hit5_DmyPoly2"] = &AtkParam::hit5_DmyPoly2;
        utAtkParam["hit6_DmyPoly2"] = &AtkParam::hit6_DmyPoly2;
        utAtkParam["hit7_DmyPoly2"] = &AtkParam::hit7_DmyPoly2;
        utAtkParam["hit8_DmyPoly2"] = &AtkParam::hit8_DmyPoly2;
        utAtkParam["hit9_DmyPoly2"] = &AtkParam::hit9_DmyPoly2;
        utAtkParam["hit10_DmyPoly2"] = &AtkParam::hit10_DmyPoly2;
        utAtkParam["hit11_DmyPoly2"] = &AtkParam::hit11_DmyPoly2;
        utAtkParam["hit12_DmyPoly2"] = &AtkParam::hit12_DmyPoly2;
        utAtkParam["hit13_DmyPoly2"] = &AtkParam::hit13_DmyPoly2;
        utAtkParam["hit14_DmyPoly2"] = &AtkParam::hit14_DmyPoly2;
        utAtkParam["hit15_DmyPoly2"] = &AtkParam::hit15_DmyPoly2;
        utAtkParam["hit4_hitType"] = &AtkParam::hit4_hitType;
        utAtkParam["hit5_hitType"] = &AtkParam::hit5_hitType;
        utAtkParam["hit6_hitType"] = &AtkParam::hit6_hitType;
        utAtkParam["hit7_hitType"] = &AtkParam::hit7_hitType;
        utAtkParam["hit8_hitType"] = &AtkParam::hit8_hitType;
        utAtkParam["hit9_hitType"] = &AtkParam::hit9_hitType;
        utAtkParam["hit10_hitType"] = &AtkParam::hit10_hitType;
        utAtkParam["hit11_hitType"] = &AtkParam::hit11_hitType;
        utAtkParam["hit12_hitType"] = &AtkParam::hit12_hitType;
        utAtkParam["hit13_hitType"] = &AtkParam::hit13_hitType;
        utAtkParam["hit14_hitType"] = &AtkParam::hit14_hitType;
        utAtkParam["hit15_hitType"] = &AtkParam::hit15_hitType;
        utAtkParam["hti4_Priority"] = &AtkParam::hti4_Priority;
        utAtkParam["hti5_Priority"] = &AtkParam::hti5_Priority;
        utAtkParam["hti6_Priority"] = &AtkParam::hti6_Priority;
        utAtkParam["hti7_Priority"] = &AtkParam::hti7_Priority;
        utAtkParam["hti8_Priority"] = &AtkParam::hti8_Priority;
        utAtkParam["hti9_Priority"] = &AtkParam::hti9_Priority;
        utAtkParam["hti10_Priority"] = &AtkParam::hti10_Priority;
        utAtkParam["hti11_Priority"] = &AtkParam::hti11_Priority;
        utAtkParam["hti12_Priority"] = &AtkParam::hti12_Priority;
        utAtkParam["hti13_Priority"] = &AtkParam::hti13_Priority;
        utAtkParam["hti14_Priority"] = &AtkParam::hti14_Priority;
        utAtkParam["hti15_Priority"] = &AtkParam::hti15_Priority;
        utAtkParam["defSfxMaterial1"] = &AtkParam::defSfxMaterial1;
        utAtkParam["defSeMaterial2"] = &AtkParam::defSeMaterial2;
        utAtkParam["defSfxMaterial2"] = &AtkParam::defSfxMaterial2;
        utAtkParam["atkDarkCorrection"] = &AtkParam::atkDarkCorrection;
        utAtkParam["atkDark"] = &AtkParam::atkDark;
        utAtkParam["isDisableParry"] = sol::property([](AtkParam &param) -> uint8_t { return param.isDisableParry; }, [](AtkParam &param, uint8_t value) { param.isDisableParry = value; });
        utAtkParam["isDisableBothHandsAtkBonus"] = sol::property([](AtkParam &param) -> uint8_t { return param.isDisableBothHandsAtkBonus; }, [](AtkParam &param, uint8_t value) { param.isDisableBothHandsAtkBonus = value; });
        utAtkParam["isInvalidatedByNoDamageInAir"] = sol::property([](AtkParam &param) -> uint8_t { return param.isInvalidatedByNoDamageInAir; }, [](AtkParam &param, uint8_t value) { param.isInvalidatedByNoDamageInAir = value; });
        utAtkParam["dmgLevel_vsPlayer"] = &AtkParam::dmgLevel_vsPlayer;
        utAtkParam["statusAilmentAtkPowerCorrectRate"] = &AtkParam::statusAilmentAtkPowerCorrectRate;
        utAtkParam["spEffectAtkPowerCorrectRate_byPoint"] = &AtkParam::spEffectAtkPowerCorrectRate_byPoint;
        utAtkParam["spEffectAtkPowerCorrectRate_byRate"] = &AtkParam::spEffectAtkPowerCorrectRate_byRate;
        utAtkParam["spEffectAtkPowerCorrectRate_byDmg"] = &AtkParam::spEffectAtkPowerCorrectRate_byDmg;
        utAtkParam["atkBehaviorId_2"] = &AtkParam::atkBehaviorId_2;
        utAtkParam["throwDamageAttribute"] = &AtkParam::throwDamageAttribute;
        utAtkParam["statusAilmentAtkPowerCorrectRate_byPoint"] = &AtkParam::statusAilmentAtkPowerCorrectRate_byPoint;
        utAtkParam["overwriteAttackElementCorrectId"] = &AtkParam::overwriteAttackElementCorrectId;
        utAtkParam["decalBaseId1"] = &AtkParam::decalBaseId1;
        utAtkParam["decalBaseId2"] = &AtkParam::decalBaseId2;
        utAtkParam["wepRegainHpScale"] = &AtkParam::wepRegainHpScale;
        utAtkParam["atkRegainHp"] = &AtkParam::atkRegainHp;
        utAtkParam["regainableTimeScale"] = &AtkParam::regainableTimeScale;
        utAtkParam["regainableHpRateScale"] = &AtkParam::regainableHpRateScale;
        utAtkParam["regainableSlotId"] = &AtkParam::regainableSlotId;
        utAtkParam["spAttributeVariationValue"] = &AtkParam::spAttributeVariationValue;
        utAtkParam["parryForwardOffset"] = &AtkParam::parryForwardOffset;
        utAtkParam["atkSuperArmorCorrection"] = &AtkParam::atkSuperArmorCorrection;
        utAtkParam["defSfxMaterialVariationValue"] = &AtkParam::defSfxMaterialVariationValue;
        utAtkParam["finalDamageRateId"] = &AtkParam::finalDamageRateId;
        utAtkParam["subCategory3"] = &AtkParam::subCategory3;
        utAtkParam["subCategory4"] = &AtkParam::subCategory4;
    };
    auto tableLoader = [delayInit = std::move(delayInit)]() -> auto { delayInit(); return std::make_unique<ParamTableIndexer<AtkParam>>(gParamMgr.findTable(L"AtkParam")); };
    paramsTable["AtkParam_Npc"] = tableLoader;
    paramsTable["AtkParam_Pc"] = tableLoader;
}

}
