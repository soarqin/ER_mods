#include "../luabindings.h"
#include "../defs/EquipParamGoods.h"

namespace paramadjuster::params {

void registerEquipParamGoods(sol::state *state, sol::table &paramsTable) {
    auto delayInit = [state, &paramsTable]() {
        if (sol::optional<sol::table> usertype = (*state)["EquipParamGoods"]; usertype) return;
        auto indexerEquipParamGoods = state->new_usertype<ParamTableIndexer<EquipParamGoods>>("EquipParamGoodsTableIndexer");
        indexerEquipParamGoods["count"] = sol::property(&ParamTableIndexer<EquipParamGoods>::count);
        indexerEquipParamGoods["__index"] = &ParamTableIndexer<EquipParamGoods>::at;
        indexerEquipParamGoods["id"] = &ParamTableIndexer<EquipParamGoods>::paramId;
        indexerEquipParamGoods["get"] = &ParamTableIndexer<EquipParamGoods>::get;
        auto utEquipParamGoods = state->new_usertype<EquipParamGoods>("EquipParamGoods");
        utEquipParamGoods["disableParam_NT"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.disableParam_NT; }, [](EquipParamGoods &param, uint8_t value) { param.disableParam_NT = value; });
        utEquipParamGoods["refId_default"] = &EquipParamGoods::refId_default;
        utEquipParamGoods["sfxVariationId"] = &EquipParamGoods::sfxVariationId;
        utEquipParamGoods["weight"] = &EquipParamGoods::weight;
        utEquipParamGoods["basicPrice"] = &EquipParamGoods::basicPrice;
        utEquipParamGoods["sellValue"] = &EquipParamGoods::sellValue;
        utEquipParamGoods["behaviorId"] = &EquipParamGoods::behaviorId;
        utEquipParamGoods["replaceItemId"] = &EquipParamGoods::replaceItemId;
        utEquipParamGoods["sortId"] = &EquipParamGoods::sortId;
        utEquipParamGoods["appearanceReplaceItemId"] = &EquipParamGoods::appearanceReplaceItemId;
        utEquipParamGoods["yesNoDialogMessageId"] = &EquipParamGoods::yesNoDialogMessageId;
        utEquipParamGoods["useEnableSpEffectType"] = &EquipParamGoods::useEnableSpEffectType;
        utEquipParamGoods["potGroupId"] = &EquipParamGoods::potGroupId;
        utEquipParamGoods["iconId"] = &EquipParamGoods::iconId;
        utEquipParamGoods["modelId"] = &EquipParamGoods::modelId;
        utEquipParamGoods["shopLv"] = &EquipParamGoods::shopLv;
        utEquipParamGoods["compTrophySedId"] = &EquipParamGoods::compTrophySedId;
        utEquipParamGoods["trophySeqId"] = &EquipParamGoods::trophySeqId;
        utEquipParamGoods["maxNum"] = &EquipParamGoods::maxNum;
        utEquipParamGoods["consumeHeroPoint"] = &EquipParamGoods::consumeHeroPoint;
        utEquipParamGoods["overDexterity"] = &EquipParamGoods::overDexterity;
        utEquipParamGoods["goodsType"] = &EquipParamGoods::goodsType;
        utEquipParamGoods["refCategory"] = &EquipParamGoods::refCategory;
        utEquipParamGoods["spEffectCategory"] = &EquipParamGoods::spEffectCategory;
        utEquipParamGoods["unknown_0x40"] = &EquipParamGoods::unknown_0x40;
        utEquipParamGoods["goodsUseAnim"] = &EquipParamGoods::goodsUseAnim;
        utEquipParamGoods["opmeMenuType"] = &EquipParamGoods::opmeMenuType;
        utEquipParamGoods["useLimitCategory"] = &EquipParamGoods::useLimitCategory;
        utEquipParamGoods["replaceCategory"] = &EquipParamGoods::replaceCategory;
        utEquipParamGoods["enable_live"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.enable_live; }, [](EquipParamGoods &param, uint8_t value) { param.enable_live = value; });
        utEquipParamGoods["enable_gray"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.enable_gray; }, [](EquipParamGoods &param, uint8_t value) { param.enable_gray = value; });
        utEquipParamGoods["enable_white"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.enable_white; }, [](EquipParamGoods &param, uint8_t value) { param.enable_white = value; });
        utEquipParamGoods["enable_black"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.enable_black; }, [](EquipParamGoods &param, uint8_t value) { param.enable_black = value; });
        utEquipParamGoods["enable_multi"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.enable_multi; }, [](EquipParamGoods &param, uint8_t value) { param.enable_multi = value; });
        utEquipParamGoods["disable_offline"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.disable_offline; }, [](EquipParamGoods &param, uint8_t value) { param.disable_offline = value; });
        utEquipParamGoods["isEquip"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isEquip; }, [](EquipParamGoods &param, uint8_t value) { param.isEquip = value; });
        utEquipParamGoods["isConsume"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isConsume; }, [](EquipParamGoods &param, uint8_t value) { param.isConsume = value; });
        utEquipParamGoods["isAutoEquip"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isAutoEquip; }, [](EquipParamGoods &param, uint8_t value) { param.isAutoEquip = value; });
        utEquipParamGoods["isEstablishment"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isEstablishment; }, [](EquipParamGoods &param, uint8_t value) { param.isEstablishment = value; });
        utEquipParamGoods["isOnlyOne"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isOnlyOne; }, [](EquipParamGoods &param, uint8_t value) { param.isOnlyOne = value; });
        utEquipParamGoods["isDiscard"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isDiscard; }, [](EquipParamGoods &param, uint8_t value) { param.isDiscard = value; });
        utEquipParamGoods["isDeposit"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isDeposit; }, [](EquipParamGoods &param, uint8_t value) { param.isDeposit = value; });
        utEquipParamGoods["isDisableHand"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isDisableHand; }, [](EquipParamGoods &param, uint8_t value) { param.isDisableHand = value; });
        utEquipParamGoods["isRemoveItem_forGameClear"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isRemoveItem_forGameClear; }, [](EquipParamGoods &param, uint8_t value) { param.isRemoveItem_forGameClear = value; });
        utEquipParamGoods["isSuppleItem"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isSuppleItem; }, [](EquipParamGoods &param, uint8_t value) { param.isSuppleItem = value; });
        utEquipParamGoods["isFullSuppleItem"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isFullSuppleItem; }, [](EquipParamGoods &param, uint8_t value) { param.isFullSuppleItem = value; });
        utEquipParamGoods["isEnhance"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isEnhance; }, [](EquipParamGoods &param, uint8_t value) { param.isEnhance = value; });
        utEquipParamGoods["isFixItem"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isFixItem; }, [](EquipParamGoods &param, uint8_t value) { param.isFixItem = value; });
        utEquipParamGoods["disableMultiDropShare"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.disableMultiDropShare; }, [](EquipParamGoods &param, uint8_t value) { param.disableMultiDropShare = value; });
        utEquipParamGoods["disableUseAtColiseum"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.disableUseAtColiseum; }, [](EquipParamGoods &param, uint8_t value) { param.disableUseAtColiseum = value; });
        utEquipParamGoods["disableUseAtOutOfColiseum"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.disableUseAtOutOfColiseum; }, [](EquipParamGoods &param, uint8_t value) { param.disableUseAtOutOfColiseum = value; });
        utEquipParamGoods["isEnableFastUseItem"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isEnableFastUseItem; }, [](EquipParamGoods &param, uint8_t value) { param.isEnableFastUseItem = value; });
        utEquipParamGoods["isApplySpecialEffect"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isApplySpecialEffect; }, [](EquipParamGoods &param, uint8_t value) { param.isApplySpecialEffect = value; });
        utEquipParamGoods["syncNumVaryId"] = &EquipParamGoods::syncNumVaryId;
        utEquipParamGoods["refId_1"] = &EquipParamGoods::refId_1;
        utEquipParamGoods["refVirtualWepId"] = &EquipParamGoods::refVirtualWepId;
        utEquipParamGoods["vagrantItemLotId"] = &EquipParamGoods::vagrantItemLotId;
        utEquipParamGoods["vagrantBonusEneDropItemLotId"] = &EquipParamGoods::vagrantBonusEneDropItemLotId;
        utEquipParamGoods["vagrantItemEneDropItemLotId"] = &EquipParamGoods::vagrantItemEneDropItemLotId;
        utEquipParamGoods["castSfxId"] = &EquipParamGoods::castSfxId;
        utEquipParamGoods["fireSfxId"] = &EquipParamGoods::fireSfxId;
        utEquipParamGoods["effectSfxId"] = &EquipParamGoods::effectSfxId;
        utEquipParamGoods["enable_ActiveBigRune"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.enable_ActiveBigRune; }, [](EquipParamGoods &param, uint8_t value) { param.enable_ActiveBigRune = value; });
        utEquipParamGoods["isBonfireWarpItem"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isBonfireWarpItem; }, [](EquipParamGoods &param, uint8_t value) { param.isBonfireWarpItem = value; });
        utEquipParamGoods["enable_Ladder"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.enable_Ladder; }, [](EquipParamGoods &param, uint8_t value) { param.enable_Ladder = value; });
        utEquipParamGoods["isUseMultiPlayPreparation"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isUseMultiPlayPreparation; }, [](EquipParamGoods &param, uint8_t value) { param.isUseMultiPlayPreparation = value; });
        utEquipParamGoods["canMultiUse"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.canMultiUse; }, [](EquipParamGoods &param, uint8_t value) { param.canMultiUse = value; });
        utEquipParamGoods["isShieldEnchant"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isShieldEnchant; }, [](EquipParamGoods &param, uint8_t value) { param.isShieldEnchant = value; });
        utEquipParamGoods["isWarpProhibited"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isWarpProhibited; }, [](EquipParamGoods &param, uint8_t value) { param.isWarpProhibited = value; });
        utEquipParamGoods["isUseMultiPenaltyOnly"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isUseMultiPenaltyOnly; }, [](EquipParamGoods &param, uint8_t value) { param.isUseMultiPenaltyOnly = value; });
        utEquipParamGoods["suppleType"] = &EquipParamGoods::suppleType;
        utEquipParamGoods["autoReplenishType"] = &EquipParamGoods::autoReplenishType;
        utEquipParamGoods["isDrop"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isDrop; }, [](EquipParamGoods &param, uint8_t value) { param.isDrop = value; });
        utEquipParamGoods["showLogCondType"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.showLogCondType; }, [](EquipParamGoods &param, uint8_t value) { param.showLogCondType = value; });
        utEquipParamGoods["isSummonHorse"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isSummonHorse; }, [](EquipParamGoods &param, uint8_t value) { param.isSummonHorse = value; });
        utEquipParamGoods["showDialogCondType"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.showDialogCondType; }, [](EquipParamGoods &param, uint8_t value) { param.showDialogCondType = value; });
        utEquipParamGoods["isSleepCollectionItem"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isSleepCollectionItem; }, [](EquipParamGoods &param, uint8_t value) { param.isSleepCollectionItem = value; });
        utEquipParamGoods["enableRiding"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.enableRiding; }, [](EquipParamGoods &param, uint8_t value) { param.enableRiding = value; });
        utEquipParamGoods["disableRiding"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.disableRiding; }, [](EquipParamGoods &param, uint8_t value) { param.disableRiding = value; });
        utEquipParamGoods["maxRepositoryNum"] = &EquipParamGoods::maxRepositoryNum;
        utEquipParamGoods["sortGroupId"] = &EquipParamGoods::sortGroupId;
        utEquipParamGoods["isUseNoAttackRegion"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.isUseNoAttackRegion; }, [](EquipParamGoods &param, uint8_t value) { param.isUseNoAttackRegion = value; });
        utEquipParamGoods["unknown_0x73_1"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.unknown_0x73_1; }, [](EquipParamGoods &param, uint8_t value) { param.unknown_0x73_1 = value; });
        utEquipParamGoods["quickMatchReplenish"] = sol::property([](EquipParamGoods &param) -> uint8_t { return param.quickMatchReplenish; }, [](EquipParamGoods &param, uint8_t value) { param.quickMatchReplenish = value; });
        utEquipParamGoods["saleValue"] = &EquipParamGoods::saleValue;
        utEquipParamGoods["rarity"] = &EquipParamGoods::rarity;
        utEquipParamGoods["useLimitSummonBuddy"] = &EquipParamGoods::useLimitSummonBuddy;
        utEquipParamGoods["useLimitSpEffectType"] = &EquipParamGoods::useLimitSpEffectType;
        utEquipParamGoods["aiUseJudgeId"] = &EquipParamGoods::aiUseJudgeId;
        utEquipParamGoods["consumeMP"] = &EquipParamGoods::consumeMP;
        utEquipParamGoods["consumeHP"] = &EquipParamGoods::consumeHP;
        utEquipParamGoods["reinforceGoodsId"] = &EquipParamGoods::reinforceGoodsId;
        utEquipParamGoods["reinforceMaterialId"] = &EquipParamGoods::reinforceMaterialId;
        utEquipParamGoods["reinforcePrice"] = &EquipParamGoods::reinforcePrice;
        utEquipParamGoods["useLevel_vowType0"] = &EquipParamGoods::useLevel_vowType0;
        utEquipParamGoods["useLevel_vowType1"] = &EquipParamGoods::useLevel_vowType1;
        utEquipParamGoods["useLevel_vowType2"] = &EquipParamGoods::useLevel_vowType2;
        utEquipParamGoods["useLevel_vowType3"] = &EquipParamGoods::useLevel_vowType3;
        utEquipParamGoods["useLevel_vowType4"] = &EquipParamGoods::useLevel_vowType4;
        utEquipParamGoods["useLevel_vowType5"] = &EquipParamGoods::useLevel_vowType5;
        utEquipParamGoods["useLevel_vowType6"] = &EquipParamGoods::useLevel_vowType6;
        utEquipParamGoods["useLevel_vowType7"] = &EquipParamGoods::useLevel_vowType7;
        utEquipParamGoods["useLevel_vowType8"] = &EquipParamGoods::useLevel_vowType8;
        utEquipParamGoods["useLevel_vowType9"] = &EquipParamGoods::useLevel_vowType9;
        utEquipParamGoods["useLevel_vowType10"] = &EquipParamGoods::useLevel_vowType10;
        utEquipParamGoods["useLevel_vowType11"] = &EquipParamGoods::useLevel_vowType11;
        utEquipParamGoods["useLevel_vowType12"] = &EquipParamGoods::useLevel_vowType12;
        utEquipParamGoods["useLevel_vowType13"] = &EquipParamGoods::useLevel_vowType13;
        utEquipParamGoods["useLevel_vowType14"] = &EquipParamGoods::useLevel_vowType14;
        utEquipParamGoods["useLevel_vowType15"] = &EquipParamGoods::useLevel_vowType15;
        utEquipParamGoods["useLevel"] = &EquipParamGoods::useLevel;
        utEquipParamGoods["itemGetTutorialFlagId"] = &EquipParamGoods::itemGetTutorialFlagId;
    };
    auto tableLoader = [delayInit = std::move(delayInit)]() -> auto { delayInit(); return std::make_unique<ParamTableIndexer<EquipParamGoods>>(gParamMgr.findTable(L"EquipParamGoods")); };
    paramsTable["EquipParamGoods"] = tableLoader;
}

}
