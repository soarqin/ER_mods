#include "../luabindings.h"
#include "../defs/MagicParam.h"

namespace paramadjuster::params {

void registerMagicParam(sol::state *state, sol::table &paramsTable) {
    auto delayInit = [state, &paramsTable]() {
        if (sol::optional<sol::table> usertype = (*state)["MagicParam"]; usertype) return;
        auto indexerMagicParam = state->new_usertype<ParamTableIndexer<MagicParam>>("MagicParamTableIndexer");
        indexerMagicParam["count"] = sol::property(&ParamTableIndexer<MagicParam>::count);
        indexerMagicParam["__index"] = &ParamTableIndexer<MagicParam>::at;
        indexerMagicParam["id"] = &ParamTableIndexer<MagicParam>::paramId;
        indexerMagicParam["get"] = &ParamTableIndexer<MagicParam>::get;
        auto utMagicParam = state->new_usertype<MagicParam>("MagicParam");
        utMagicParam["disableParam_NT"] = sol::property([](MagicParam &param) -> uint8_t { return param.disableParam_NT; }, [](MagicParam &param, uint8_t value) { param.disableParam_NT = value; });
        utMagicParam["yesNoDialogMessageId"] = &MagicParam::yesNoDialogMessageId;
        utMagicParam["limitCancelSpEffectId"] = &MagicParam::limitCancelSpEffectId;
        utMagicParam["sortId"] = &MagicParam::sortId;
        utMagicParam["requirementLuck"] = &MagicParam::requirementLuck;
        utMagicParam["aiNotifyType"] = &MagicParam::aiNotifyType;
        utMagicParam["mp"] = &MagicParam::mp;
        utMagicParam["stamina"] = &MagicParam::stamina;
        utMagicParam["iconId"] = &MagicParam::iconId;
        utMagicParam["behaviorId"] = &MagicParam::behaviorId;
        utMagicParam["mtrlItemId"] = &MagicParam::mtrlItemId;
        utMagicParam["replaceMagicId"] = &MagicParam::replaceMagicId;
        utMagicParam["maxQuantity"] = &MagicParam::maxQuantity;
        utMagicParam["refCategory1"] = &MagicParam::refCategory1;
        utMagicParam["overDexterity"] = &MagicParam::overDexterity;
        utMagicParam["refCategory2"] = &MagicParam::refCategory2;
        utMagicParam["slotLength"] = &MagicParam::slotLength;
        utMagicParam["requirementIntellect"] = &MagicParam::requirementIntellect;
        utMagicParam["requirementFaith"] = &MagicParam::requirementFaith;
        utMagicParam["analogDexterityMin"] = &MagicParam::analogDexterityMin;
        utMagicParam["analogDexterityMax"] = &MagicParam::analogDexterityMax;
        utMagicParam["ezStateBehaviorType"] = &MagicParam::ezStateBehaviorType;
        utMagicParam["refCategory3"] = &MagicParam::refCategory3;
        utMagicParam["spEffectCategory"] = &MagicParam::spEffectCategory;
        utMagicParam["refType"] = &MagicParam::refType;
        utMagicParam["opmeMenuType"] = &MagicParam::opmeMenuType;
        utMagicParam["refCategory4"] = &MagicParam::refCategory4;
        utMagicParam["hasSpEffectType"] = &MagicParam::hasSpEffectType;
        utMagicParam["replaceCategory"] = &MagicParam::replaceCategory;
        utMagicParam["useLimitCategory"] = &MagicParam::useLimitCategory;
        utMagicParam["vowType0"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType0; }, [](MagicParam &param, uint8_t value) { param.vowType0 = value; });
        utMagicParam["vowType1"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType1; }, [](MagicParam &param, uint8_t value) { param.vowType1 = value; });
        utMagicParam["vowType2"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType2; }, [](MagicParam &param, uint8_t value) { param.vowType2 = value; });
        utMagicParam["vowType3"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType3; }, [](MagicParam &param, uint8_t value) { param.vowType3 = value; });
        utMagicParam["vowType4"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType4; }, [](MagicParam &param, uint8_t value) { param.vowType4 = value; });
        utMagicParam["vowType5"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType5; }, [](MagicParam &param, uint8_t value) { param.vowType5 = value; });
        utMagicParam["vowType6"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType6; }, [](MagicParam &param, uint8_t value) { param.vowType6 = value; });
        utMagicParam["vowType7"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType7; }, [](MagicParam &param, uint8_t value) { param.vowType7 = value; });
        utMagicParam["enable_multi"] = sol::property([](MagicParam &param) -> uint8_t { return param.enable_multi; }, [](MagicParam &param, uint8_t value) { param.enable_multi = value; });
        utMagicParam["enable_multi_only"] = sol::property([](MagicParam &param) -> uint8_t { return param.enable_multi_only; }, [](MagicParam &param, uint8_t value) { param.enable_multi_only = value; });
        utMagicParam["isEnchant"] = sol::property([](MagicParam &param) -> uint8_t { return param.isEnchant; }, [](MagicParam &param, uint8_t value) { param.isEnchant = value; });
        utMagicParam["isShieldEnchant"] = sol::property([](MagicParam &param) -> uint8_t { return param.isShieldEnchant; }, [](MagicParam &param, uint8_t value) { param.isShieldEnchant = value; });
        utMagicParam["enable_live"] = sol::property([](MagicParam &param) -> uint8_t { return param.enable_live; }, [](MagicParam &param, uint8_t value) { param.enable_live = value; });
        utMagicParam["enable_gray"] = sol::property([](MagicParam &param) -> uint8_t { return param.enable_gray; }, [](MagicParam &param, uint8_t value) { param.enable_gray = value; });
        utMagicParam["enable_white"] = sol::property([](MagicParam &param) -> uint8_t { return param.enable_white; }, [](MagicParam &param, uint8_t value) { param.enable_white = value; });
        utMagicParam["enable_black"] = sol::property([](MagicParam &param) -> uint8_t { return param.enable_black; }, [](MagicParam &param, uint8_t value) { param.enable_black = value; });
        utMagicParam["disableOffline"] = sol::property([](MagicParam &param) -> uint8_t { return param.disableOffline; }, [](MagicParam &param, uint8_t value) { param.disableOffline = value; });
        utMagicParam["castResonanceMagic"] = sol::property([](MagicParam &param) -> uint8_t { return param.castResonanceMagic; }, [](MagicParam &param, uint8_t value) { param.castResonanceMagic = value; });
        utMagicParam["isValidTough_ProtSADmg"] = sol::property([](MagicParam &param) -> uint8_t { return param.isValidTough_ProtSADmg; }, [](MagicParam &param, uint8_t value) { param.isValidTough_ProtSADmg = value; });
        utMagicParam["isWarpMagic"] = sol::property([](MagicParam &param) -> uint8_t { return param.isWarpMagic; }, [](MagicParam &param, uint8_t value) { param.isWarpMagic = value; });
        utMagicParam["enableRiding"] = sol::property([](MagicParam &param) -> uint8_t { return param.enableRiding; }, [](MagicParam &param, uint8_t value) { param.enableRiding = value; });
        utMagicParam["disableRiding"] = sol::property([](MagicParam &param) -> uint8_t { return param.disableRiding; }, [](MagicParam &param, uint8_t value) { param.disableRiding = value; });
        utMagicParam["isUseNoAttackRegion"] = sol::property([](MagicParam &param) -> uint8_t { return param.isUseNoAttackRegion; }, [](MagicParam &param, uint8_t value) { param.isUseNoAttackRegion = value; });
        utMagicParam["vowType8"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType8; }, [](MagicParam &param, uint8_t value) { param.vowType8 = value; });
        utMagicParam["vowType9"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType9; }, [](MagicParam &param, uint8_t value) { param.vowType9 = value; });
        utMagicParam["vowType10"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType10; }, [](MagicParam &param, uint8_t value) { param.vowType10 = value; });
        utMagicParam["vowType11"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType11; }, [](MagicParam &param, uint8_t value) { param.vowType11 = value; });
        utMagicParam["vowType12"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType12; }, [](MagicParam &param, uint8_t value) { param.vowType12 = value; });
        utMagicParam["vowType13"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType13; }, [](MagicParam &param, uint8_t value) { param.vowType13 = value; });
        utMagicParam["vowType14"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType14; }, [](MagicParam &param, uint8_t value) { param.vowType14 = value; });
        utMagicParam["vowType15"] = sol::property([](MagicParam &param) -> uint8_t { return param.vowType15; }, [](MagicParam &param, uint8_t value) { param.vowType15 = value; });
        utMagicParam["castSfxId"] = &MagicParam::castSfxId;
        utMagicParam["fireSfxId"] = &MagicParam::fireSfxId;
        utMagicParam["effectSfxId"] = &MagicParam::effectSfxId;
        utMagicParam["toughnessCorrectRate"] = &MagicParam::toughnessCorrectRate;
        utMagicParam["ReplacementStatusType"] = &MagicParam::ReplacementStatusType;
        utMagicParam["ReplacementStatus1"] = &MagicParam::ReplacementStatus1;
        utMagicParam["ReplacementStatus2"] = &MagicParam::ReplacementStatus2;
        utMagicParam["ReplacementStatus3"] = &MagicParam::ReplacementStatus3;
        utMagicParam["ReplacementStatus4"] = &MagicParam::ReplacementStatus4;
        utMagicParam["refCategory5"] = &MagicParam::refCategory5;
        utMagicParam["consumeSA"] = &MagicParam::consumeSA;
        utMagicParam["ReplacementMagic1"] = &MagicParam::ReplacementMagic1;
        utMagicParam["ReplacementMagic2"] = &MagicParam::ReplacementMagic2;
        utMagicParam["ReplacementMagic3"] = &MagicParam::ReplacementMagic3;
        utMagicParam["ReplacementMagic4"] = &MagicParam::ReplacementMagic4;
        utMagicParam["mp_charge"] = &MagicParam::mp_charge;
        utMagicParam["stamina_charge"] = &MagicParam::stamina_charge;
        utMagicParam["createLimitGroupId"] = &MagicParam::createLimitGroupId;
        utMagicParam["refCategory6"] = &MagicParam::refCategory6;
        utMagicParam["subCategory1"] = &MagicParam::subCategory1;
        utMagicParam["subCategory2"] = &MagicParam::subCategory2;
        utMagicParam["refCategory7"] = &MagicParam::refCategory7;
        utMagicParam["refCategory8"] = &MagicParam::refCategory8;
        utMagicParam["refCategory9"] = &MagicParam::refCategory9;
        utMagicParam["refCategory10"] = &MagicParam::refCategory10;
        utMagicParam["refId1"] = &MagicParam::refId1;
        utMagicParam["refId2"] = &MagicParam::refId2;
        utMagicParam["refId3"] = &MagicParam::refId3;
        utMagicParam["aiUseJudgeId"] = &MagicParam::aiUseJudgeId;
        utMagicParam["refId4"] = &MagicParam::refId4;
        utMagicParam["refId5"] = &MagicParam::refId5;
        utMagicParam["refId6"] = &MagicParam::refId6;
        utMagicParam["refId7"] = &MagicParam::refId7;
        utMagicParam["refId8"] = &MagicParam::refId8;
        utMagicParam["refId9"] = &MagicParam::refId9;
        utMagicParam["refId10"] = &MagicParam::refId10;
        utMagicParam["consumeType1"] = &MagicParam::consumeType1;
        utMagicParam["consumeType2"] = &MagicParam::consumeType2;
        utMagicParam["consumeType3"] = &MagicParam::consumeType3;
        utMagicParam["consumeType4"] = &MagicParam::consumeType4;
        utMagicParam["consumeType5"] = &MagicParam::consumeType5;
        utMagicParam["consumeType6"] = &MagicParam::consumeType6;
        utMagicParam["consumeType7"] = &MagicParam::consumeType7;
        utMagicParam["consumeType8"] = &MagicParam::consumeType8;
        utMagicParam["consumeType9"] = &MagicParam::consumeType9;
        utMagicParam["consumeType10"] = &MagicParam::consumeType10;
        utMagicParam["consumeLoopMP_forMenu"] = &MagicParam::consumeLoopMP_forMenu;
    };
    auto tableLoader = [delayInit = std::move(delayInit)]() -> auto { delayInit(); return std::make_unique<ParamTableIndexer<MagicParam>>(gParamMgr.findTable(L"MagicParam")); };
    paramsTable["Magic"] = tableLoader;
}

}
