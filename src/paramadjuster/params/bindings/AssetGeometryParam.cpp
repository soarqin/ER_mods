#include "../luabindings.h"
#include "../defs/AssetGeometryParam.h"

namespace paramadjuster::params {

void registerAssetGeometryParam(sol::state *state, sol::table &paramsTable) {
    auto delayInit = [state, &paramsTable]() {
        if (sol::optional<sol::table> usertype = (*state)["AssetGeometryParam"]; usertype) return;
        auto indexerAssetGeometryParam = state->new_usertype<ParamTableIndexer<AssetGeometryParam>>("AssetGeometryParamTableIndexer");
        indexerAssetGeometryParam["count"] = sol::property(&ParamTableIndexer<AssetGeometryParam>::count);
        indexerAssetGeometryParam["__index"] = &ParamTableIndexer<AssetGeometryParam>::at;
        indexerAssetGeometryParam["id"] = &ParamTableIndexer<AssetGeometryParam>::paramId;
        indexerAssetGeometryParam["get"] = &ParamTableIndexer<AssetGeometryParam>::get;
        auto utAssetGeometryParam = state->new_usertype<AssetGeometryParam>("AssetGeometryParam");
        utAssetGeometryParam["soundBankId"] = &AssetGeometryParam::soundBankId;
        utAssetGeometryParam["soundBreakSEId"] = &AssetGeometryParam::soundBreakSEId;
        utAssetGeometryParam["refDrawParamId"] = &AssetGeometryParam::refDrawParamId;
        utAssetGeometryParam["hitCreateType"] = &AssetGeometryParam::hitCreateType;
        utAssetGeometryParam["behaviorType"] = &AssetGeometryParam::behaviorType;
        utAssetGeometryParam["collisionType"] = &AssetGeometryParam::collisionType;
        utAssetGeometryParam["rainBlockingType"] = &AssetGeometryParam::rainBlockingType;
        utAssetGeometryParam["hp"] = &AssetGeometryParam::hp;
        utAssetGeometryParam["defense"] = &AssetGeometryParam::defense;
        utAssetGeometryParam["breakStopTime"] = &AssetGeometryParam::breakStopTime;
        utAssetGeometryParam["breakSfxId"] = &AssetGeometryParam::breakSfxId;
        utAssetGeometryParam["breakSfxCpId"] = &AssetGeometryParam::breakSfxCpId;
        utAssetGeometryParam["breakLandingSfxId"] = &AssetGeometryParam::breakLandingSfxId;
        utAssetGeometryParam["breakBulletBehaviorId"] = &AssetGeometryParam::breakBulletBehaviorId;
        utAssetGeometryParam["breakBulletCpId"] = &AssetGeometryParam::breakBulletCpId;
        utAssetGeometryParam["FragmentInvisibleWaitTime"] = &AssetGeometryParam::FragmentInvisibleWaitTime;
        utAssetGeometryParam["FragmentInvisibleTime"] = &AssetGeometryParam::FragmentInvisibleTime;
        utAssetGeometryParam["BreakAiSoundID"] = &AssetGeometryParam::BreakAiSoundID;
        utAssetGeometryParam["breakItemLotType"] = &AssetGeometryParam::breakItemLotType;
        utAssetGeometryParam["animBreakIdMax"] = &AssetGeometryParam::animBreakIdMax;
        utAssetGeometryParam["breakBulletAttributeDamageType"] = &AssetGeometryParam::breakBulletAttributeDamageType;
        utAssetGeometryParam["isBreakByPlayerCollide"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isBreakByPlayerCollide; }, [](AssetGeometryParam &param, uint8_t value) { param.isBreakByPlayerCollide = value; });
        utAssetGeometryParam["isBreakByEnemyCollide"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isBreakByEnemyCollide; }, [](AssetGeometryParam &param, uint8_t value) { param.isBreakByEnemyCollide = value; });
        utAssetGeometryParam["isBreak_ByChrRide"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isBreak_ByChrRide; }, [](AssetGeometryParam &param, uint8_t value) { param.isBreak_ByChrRide = value; });
        utAssetGeometryParam["isDisableBreakForFirstAppear"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isDisableBreakForFirstAppear; }, [](AssetGeometryParam &param, uint8_t value) { param.isDisableBreakForFirstAppear = value; });
        utAssetGeometryParam["isAnimBreak"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isAnimBreak; }, [](AssetGeometryParam &param, uint8_t value) { param.isAnimBreak = value; });
        utAssetGeometryParam["isDamageCover"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isDamageCover; }, [](AssetGeometryParam &param, uint8_t value) { param.isDamageCover = value; });
        utAssetGeometryParam["isAttackBacklash"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isAttackBacklash; }, [](AssetGeometryParam &param, uint8_t value) { param.isAttackBacklash = value; });
        utAssetGeometryParam["unknown_0x3b_7"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.unknown_0x3b_7; }, [](AssetGeometryParam &param, uint8_t value) { param.unknown_0x3b_7 = value; });
        utAssetGeometryParam["isLadder"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isLadder; }, [](AssetGeometryParam &param, uint8_t value) { param.isLadder = value; });
        utAssetGeometryParam["isMoveObj"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isMoveObj; }, [](AssetGeometryParam &param, uint8_t value) { param.isMoveObj = value; });
        utAssetGeometryParam["isSkydomeFlag"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isSkydomeFlag; }, [](AssetGeometryParam &param, uint8_t value) { param.isSkydomeFlag = value; });
        utAssetGeometryParam["isAnimPauseOnRemoPlay"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isAnimPauseOnRemoPlay; }, [](AssetGeometryParam &param, uint8_t value) { param.isAnimPauseOnRemoPlay = value; });
        utAssetGeometryParam["isBurn"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isBurn; }, [](AssetGeometryParam &param, uint8_t value) { param.isBurn = value; });
        utAssetGeometryParam["isEnableRepick"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isEnableRepick; }, [](AssetGeometryParam &param, uint8_t value) { param.isEnableRepick = value; });
        utAssetGeometryParam["isBreakOnPickUp"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isBreakOnPickUp; }, [](AssetGeometryParam &param, uint8_t value) { param.isBreakOnPickUp = value; });
        utAssetGeometryParam["isBreakByHugeenemyCollide"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isBreakByHugeenemyCollide; }, [](AssetGeometryParam &param, uint8_t value) { param.isBreakByHugeenemyCollide = value; });
        utAssetGeometryParam["navimeshFlag"] = &AssetGeometryParam::navimeshFlag;
        utAssetGeometryParam["burnBulletInterval"] = &AssetGeometryParam::burnBulletInterval;
        utAssetGeometryParam["clothUpdateDist"] = &AssetGeometryParam::clothUpdateDist;
        utAssetGeometryParam["lifeTime_forRuntimeCreate"] = &AssetGeometryParam::lifeTime_forRuntimeCreate;
        utAssetGeometryParam["contactSeId"] = &AssetGeometryParam::contactSeId;
        utAssetGeometryParam["repickAnimIdOffset"] = &AssetGeometryParam::repickAnimIdOffset;
        utAssetGeometryParam["windEffectRate_0"] = &AssetGeometryParam::windEffectRate_0;
        utAssetGeometryParam["windEffectRate_1"] = &AssetGeometryParam::windEffectRate_1;
        utAssetGeometryParam["windEffectType_0"] = &AssetGeometryParam::windEffectType_0;
        utAssetGeometryParam["windEffectType_1"] = &AssetGeometryParam::windEffectType_1;
        utAssetGeometryParam["overrideMaterialId"] = &AssetGeometryParam::overrideMaterialId;
        utAssetGeometryParam["autoCreateOffsetHeight"] = &AssetGeometryParam::autoCreateOffsetHeight;
        utAssetGeometryParam["burnTime"] = &AssetGeometryParam::burnTime;
        utAssetGeometryParam["burnBraekRate"] = &AssetGeometryParam::burnBraekRate;
        utAssetGeometryParam["burnSfxId"] = &AssetGeometryParam::burnSfxId;
        utAssetGeometryParam["burnSfxId_1"] = &AssetGeometryParam::burnSfxId_1;
        utAssetGeometryParam["burnSfxId_2"] = &AssetGeometryParam::burnSfxId_2;
        utAssetGeometryParam["burnSfxId_3"] = &AssetGeometryParam::burnSfxId_3;
        utAssetGeometryParam["burnSfxDelayTimeMin"] = &AssetGeometryParam::burnSfxDelayTimeMin;
        utAssetGeometryParam["burnSfxDelayTimeMin_1"] = &AssetGeometryParam::burnSfxDelayTimeMin_1;
        utAssetGeometryParam["burnSfxDelayTimeMin_2"] = &AssetGeometryParam::burnSfxDelayTimeMin_2;
        utAssetGeometryParam["burnSfxDelayTimeMin_3"] = &AssetGeometryParam::burnSfxDelayTimeMin_3;
        utAssetGeometryParam["burnSfxDelayTimeMax"] = &AssetGeometryParam::burnSfxDelayTimeMax;
        utAssetGeometryParam["burnSfxDelayTimeMax_1"] = &AssetGeometryParam::burnSfxDelayTimeMax_1;
        utAssetGeometryParam["burnSfxDelayTimeMax_2"] = &AssetGeometryParam::burnSfxDelayTimeMax_2;
        utAssetGeometryParam["burnSfxDelayTimeMax_3"] = &AssetGeometryParam::burnSfxDelayTimeMax_3;
        utAssetGeometryParam["burnBulletBehaviorId"] = &AssetGeometryParam::burnBulletBehaviorId;
        utAssetGeometryParam["burnBulletBehaviorId_1"] = &AssetGeometryParam::burnBulletBehaviorId_1;
        utAssetGeometryParam["burnBulletBehaviorId_2"] = &AssetGeometryParam::burnBulletBehaviorId_2;
        utAssetGeometryParam["burnBulletBehaviorId_3"] = &AssetGeometryParam::burnBulletBehaviorId_3;
        utAssetGeometryParam["burnBulletDelayTime"] = &AssetGeometryParam::burnBulletDelayTime;
        utAssetGeometryParam["paintDecalTargetTextureSize"] = &AssetGeometryParam::paintDecalTargetTextureSize;
        utAssetGeometryParam["navimeshFlag_after"] = &AssetGeometryParam::navimeshFlag_after;
        utAssetGeometryParam["camNearBehaviorType"] = &AssetGeometryParam::camNearBehaviorType;
        utAssetGeometryParam["breakItemLotParamId"] = &AssetGeometryParam::breakItemLotParamId;
        utAssetGeometryParam["pickUpActionButtonParamId"] = &AssetGeometryParam::pickUpActionButtonParamId;
        utAssetGeometryParam["pickUpItemLotParamId"] = &AssetGeometryParam::pickUpItemLotParamId;
        utAssetGeometryParam["autoDrawGroupBackFaceCheck"] = &AssetGeometryParam::autoDrawGroupBackFaceCheck;
        utAssetGeometryParam["autoDrawGroupDepthWrite"] = &AssetGeometryParam::autoDrawGroupDepthWrite;
        utAssetGeometryParam["autoDrawGroupShadowTest"] = &AssetGeometryParam::autoDrawGroupShadowTest;
        utAssetGeometryParam["debug_isHeightCheckEnable"] = &AssetGeometryParam::debug_isHeightCheckEnable;
        utAssetGeometryParam["hitCarverCancelAreaFlag"] = &AssetGeometryParam::hitCarverCancelAreaFlag;
        utAssetGeometryParam["assetNavimeshNoCombine"] = &AssetGeometryParam::assetNavimeshNoCombine;
        utAssetGeometryParam["navimeshFlagApply"] = &AssetGeometryParam::navimeshFlagApply;
        utAssetGeometryParam["navimeshFlagApply_after"] = &AssetGeometryParam::navimeshFlagApply_after;
        utAssetGeometryParam["autoDrawGroupPassPixelNum"] = &AssetGeometryParam::autoDrawGroupPassPixelNum;
        utAssetGeometryParam["pickUpReplacementEventFlag"] = &AssetGeometryParam::pickUpReplacementEventFlag;
        utAssetGeometryParam["pickUpReplacementAnimIdOffset"] = &AssetGeometryParam::pickUpReplacementAnimIdOffset;
        utAssetGeometryParam["pickUpReplacementActionButtonParamId"] = &AssetGeometryParam::pickUpReplacementActionButtonParamId;
        utAssetGeometryParam["pickUpReplacementItemLotParamId"] = &AssetGeometryParam::pickUpReplacementItemLotParamId;
        utAssetGeometryParam["slidingBulletHitType"] = &AssetGeometryParam::slidingBulletHitType;
        utAssetGeometryParam["isBushesForDamage"] = &AssetGeometryParam::isBushesForDamage;
        utAssetGeometryParam["penetrationBulletType"] = &AssetGeometryParam::penetrationBulletType;
        utAssetGeometryParam["unkR3"] = &AssetGeometryParam::unkR3;
        utAssetGeometryParam["unkR4"] = &AssetGeometryParam::unkR4;
        utAssetGeometryParam["soundBreakSECpId"] = &AssetGeometryParam::soundBreakSECpId;
        utAssetGeometryParam["debug_HeightCheckCapacityMin"] = &AssetGeometryParam::debug_HeightCheckCapacityMin;
        utAssetGeometryParam["debug_HeightCheckCapacityMax"] = &AssetGeometryParam::debug_HeightCheckCapacityMax;
        utAssetGeometryParam["repickActionButtonParamId"] = &AssetGeometryParam::repickActionButtonParamId;
        utAssetGeometryParam["repickItemLotParamId"] = &AssetGeometryParam::repickItemLotParamId;
        utAssetGeometryParam["repickReplacementAnimIdOffset"] = &AssetGeometryParam::repickReplacementAnimIdOffset;
        utAssetGeometryParam["repickReplacementActionButtonParamId"] = &AssetGeometryParam::repickReplacementActionButtonParamId;
        utAssetGeometryParam["repickReplacementItemLotParamId"] = &AssetGeometryParam::repickReplacementItemLotParamId;
        utAssetGeometryParam["noGenerateCarver"] = &AssetGeometryParam::noGenerateCarver;
        utAssetGeometryParam["noHitHugeAfterBreak"] = &AssetGeometryParam::noHitHugeAfterBreak;
        utAssetGeometryParam["isEnabledBreakSync"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isEnabledBreakSync; }, [](AssetGeometryParam &param, uint8_t value) { param.isEnabledBreakSync = value; });
        utAssetGeometryParam["isHiddenOnRepick"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isHiddenOnRepick; }, [](AssetGeometryParam &param, uint8_t value) { param.isHiddenOnRepick = value; });
        utAssetGeometryParam["isCreateMultiPlayOnly"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isCreateMultiPlayOnly; }, [](AssetGeometryParam &param, uint8_t value) { param.isCreateMultiPlayOnly = value; });
        utAssetGeometryParam["isDisableBulletHitSfx"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isDisableBulletHitSfx; }, [](AssetGeometryParam &param, uint8_t value) { param.isDisableBulletHitSfx = value; });
        utAssetGeometryParam["isEnableSignPreBreak"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isEnableSignPreBreak; }, [](AssetGeometryParam &param, uint8_t value) { param.isEnableSignPreBreak = value; });
        utAssetGeometryParam["isEnableSignPostBreak"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.isEnableSignPostBreak; }, [](AssetGeometryParam &param, uint8_t value) { param.isEnableSignPostBreak = value; });
        utAssetGeometryParam["unkR1"] = sol::property([](AssetGeometryParam &param) -> uint8_t { return param.unkR1; }, [](AssetGeometryParam &param, uint8_t value) { param.unkR1 = value; });
        utAssetGeometryParam["generateMultiForbiddenRegion"] = &AssetGeometryParam::generateMultiForbiddenRegion;
        utAssetGeometryParam["residentSeId0"] = &AssetGeometryParam::residentSeId0;
        utAssetGeometryParam["residentSeId1"] = &AssetGeometryParam::residentSeId1;
        utAssetGeometryParam["residentSeId2"] = &AssetGeometryParam::residentSeId2;
        utAssetGeometryParam["residentSeId3"] = &AssetGeometryParam::residentSeId3;
        utAssetGeometryParam["residentSeDmypolyId0"] = &AssetGeometryParam::residentSeDmypolyId0;
        utAssetGeometryParam["residentSeDmypolyId1"] = &AssetGeometryParam::residentSeDmypolyId1;
        utAssetGeometryParam["residentSeDmypolyId2"] = &AssetGeometryParam::residentSeDmypolyId2;
        utAssetGeometryParam["residentSeDmypolyId3"] = &AssetGeometryParam::residentSeDmypolyId3;
        utAssetGeometryParam["excludeActivateRatio_Xboxone_Grid"] = &AssetGeometryParam::excludeActivateRatio_Xboxone_Grid;
        utAssetGeometryParam["excludeActivateRatio_Xboxone_Legacy"] = &AssetGeometryParam::excludeActivateRatio_Xboxone_Legacy;
        utAssetGeometryParam["excludeActivateRatio_PS4_Grid"] = &AssetGeometryParam::excludeActivateRatio_PS4_Grid;
        utAssetGeometryParam["excludeActivateRatio_PS4_Legacy"] = &AssetGeometryParam::excludeActivateRatio_PS4_Legacy;
        utAssetGeometryParam["unknown_0x120"] = &AssetGeometryParam::unknown_0x120;
        utAssetGeometryParam["unknown_0x121"] = &AssetGeometryParam::unknown_0x121;
        utAssetGeometryParam["unknown_0x122"] = &AssetGeometryParam::unknown_0x122;
        utAssetGeometryParam["unknown_0x123"] = &AssetGeometryParam::unknown_0x123;
        utAssetGeometryParam["unknown_0x124"] = &AssetGeometryParam::unknown_0x124;
        utAssetGeometryParam["unknown_0x125"] = &AssetGeometryParam::unknown_0x125;
    };
    auto tableLoader = [delayInit = std::move(delayInit)]() -> auto { delayInit(); return std::make_unique<ParamTableIndexer<AssetGeometryParam>>(gParamMgr.findTable(L"AssetGeometryParam")); };
    paramsTable["AssetEnvironmentGeometryParam"] = tableLoader;
}

}
