#include "../luabindings.h"
#include "../defs/BulletParam.h"

namespace paramadjuster::params {

void registerBulletParam(sol::state *state, sol::table &paramsTable) {
    auto delayInit = [state, &paramsTable]() {
        if (sol::optional<sol::table> usertype = (*state)["BulletParam"]; usertype) return;
        auto indexerBulletParam = state->new_usertype<ParamTableIndexer<BulletParam>>("BulletParamTableIndexer");
        indexerBulletParam["count"] = sol::property(&ParamTableIndexer<BulletParam>::count);
        indexerBulletParam["__index"] = &ParamTableIndexer<BulletParam>::at;
        indexerBulletParam["id"] = &ParamTableIndexer<BulletParam>::paramId;
        indexerBulletParam["get"] = &ParamTableIndexer<BulletParam>::get;
        auto utBulletParam = state->new_usertype<BulletParam>("BulletParam");
        utBulletParam["atkId_Bullet"] = &BulletParam::atkId_Bullet;
        utBulletParam["sfxId_Bullet"] = &BulletParam::sfxId_Bullet;
        utBulletParam["sfxId_Hit"] = &BulletParam::sfxId_Hit;
        utBulletParam["sfxId_Flick"] = &BulletParam::sfxId_Flick;
        utBulletParam["life"] = &BulletParam::life;
        utBulletParam["dist"] = &BulletParam::dist;
        utBulletParam["shootInterval"] = &BulletParam::shootInterval;
        utBulletParam["gravityInRange"] = &BulletParam::gravityInRange;
        utBulletParam["gravityOutRange"] = &BulletParam::gravityOutRange;
        utBulletParam["hormingStopRange"] = &BulletParam::hormingStopRange;
        utBulletParam["initVellocity"] = &BulletParam::initVellocity;
        utBulletParam["accelInRange"] = &BulletParam::accelInRange;
        utBulletParam["accelOutRange"] = &BulletParam::accelOutRange;
        utBulletParam["maxVellocity"] = &BulletParam::maxVellocity;
        utBulletParam["minVellocity"] = &BulletParam::minVellocity;
        utBulletParam["accelTime"] = &BulletParam::accelTime;
        utBulletParam["homingBeginDist"] = &BulletParam::homingBeginDist;
        utBulletParam["hitRadius"] = &BulletParam::hitRadius;
        utBulletParam["hitRadiusMax"] = &BulletParam::hitRadiusMax;
        utBulletParam["spreadTime"] = &BulletParam::spreadTime;
        utBulletParam["expDelay"] = &BulletParam::expDelay;
        utBulletParam["hormingOffsetRange"] = &BulletParam::hormingOffsetRange;
        utBulletParam["dmgHitRecordLifeTime"] = &BulletParam::dmgHitRecordLifeTime;
        utBulletParam["externalForce"] = &BulletParam::externalForce;
        utBulletParam["spEffectIDForShooter"] = &BulletParam::spEffectIDForShooter;
        utBulletParam["autoSearchNPCThinkID"] = &BulletParam::autoSearchNPCThinkID;
        utBulletParam["HitBulletID"] = &BulletParam::HitBulletID;
        utBulletParam["spEffectId0"] = &BulletParam::spEffectId0;
        utBulletParam["spEffectId1"] = &BulletParam::spEffectId1;
        utBulletParam["spEffectId2"] = &BulletParam::spEffectId2;
        utBulletParam["spEffectId3"] = &BulletParam::spEffectId3;
        utBulletParam["spEffectId4"] = &BulletParam::spEffectId4;
        utBulletParam["numShoot"] = &BulletParam::numShoot;
        utBulletParam["homingAngle"] = &BulletParam::homingAngle;
        utBulletParam["shootAngle"] = &BulletParam::shootAngle;
        utBulletParam["shootAngleInterval"] = &BulletParam::shootAngleInterval;
        utBulletParam["shootAngleXInterval"] = &BulletParam::shootAngleXInterval;
        utBulletParam["damageDamp"] = &BulletParam::damageDamp;
        utBulletParam["spelDamageDamp"] = &BulletParam::spelDamageDamp;
        utBulletParam["fireDamageDamp"] = &BulletParam::fireDamageDamp;
        utBulletParam["thunderDamageDamp"] = &BulletParam::thunderDamageDamp;
        utBulletParam["staminaDamp"] = &BulletParam::staminaDamp;
        utBulletParam["knockbackDamp"] = &BulletParam::knockbackDamp;
        utBulletParam["shootAngleXZ"] = &BulletParam::shootAngleXZ;
        utBulletParam["lockShootLimitAng"] = &BulletParam::lockShootLimitAng;
        utBulletParam["prevVelocityDirRate"] = &BulletParam::prevVelocityDirRate;
        utBulletParam["atkAttribute"] = &BulletParam::atkAttribute;
        utBulletParam["spAttribute"] = &BulletParam::spAttribute;
        utBulletParam["Material_AttackType"] = &BulletParam::Material_AttackType;
        utBulletParam["Material_AttackMaterial"] = &BulletParam::Material_AttackMaterial;
        utBulletParam["isPenetrateChr"] = sol::property([](BulletParam &param) -> uint8_t { return param.isPenetrateChr; }, [](BulletParam &param, uint8_t value) { param.isPenetrateChr = value; });
        utBulletParam["isPenetrateObj"] = sol::property([](BulletParam &param) -> uint8_t { return param.isPenetrateObj; }, [](BulletParam &param, uint8_t value) { param.isPenetrateObj = value; });
        utBulletParam["mayRemoteDetonate"] = sol::property([](BulletParam &param) -> uint8_t { return param.mayRemoteDetonate; }, [](BulletParam &param, uint8_t value) { param.mayRemoteDetonate = value; });
        utBulletParam["launchConditionType"] = &BulletParam::launchConditionType;
        utBulletParam["FollowType"] = sol::property([](BulletParam &param) -> uint8_t { return param.FollowType; }, [](BulletParam &param, uint8_t value) { param.FollowType = value; });
        utBulletParam["EmittePosType"] = sol::property([](BulletParam &param) -> uint8_t { return param.EmittePosType; }, [](BulletParam &param, uint8_t value) { param.EmittePosType = value; });
        utBulletParam["isAttackSFX"] = sol::property([](BulletParam &param) -> uint8_t { return param.isAttackSFX; }, [](BulletParam &param, uint8_t value) { param.isAttackSFX = value; });
        utBulletParam["isEndlessHit"] = sol::property([](BulletParam &param) -> uint8_t { return param.isEndlessHit; }, [](BulletParam &param, uint8_t value) { param.isEndlessHit = value; });
        utBulletParam["isPenetrateMap"] = sol::property([](BulletParam &param) -> uint8_t { return param.isPenetrateMap; }, [](BulletParam &param, uint8_t value) { param.isPenetrateMap = value; });
        utBulletParam["isHitBothTeam"] = sol::property([](BulletParam &param) -> uint8_t { return param.isHitBothTeam; }, [](BulletParam &param, uint8_t value) { param.isHitBothTeam = value; });
        utBulletParam["isUseSharedHitList"] = sol::property([](BulletParam &param) -> uint8_t { return param.isUseSharedHitList; }, [](BulletParam &param, uint8_t value) { param.isUseSharedHitList = value; });
        utBulletParam["isUseMultiDmyPolyIfPlace"] = sol::property([](BulletParam &param) -> uint8_t { return param.isUseMultiDmyPolyIfPlace; }, [](BulletParam &param, uint8_t value) { param.isUseMultiDmyPolyIfPlace = value; });
        utBulletParam["isHitOtherBulletForceEraseA"] = sol::property([](BulletParam &param) -> uint8_t { return param.isHitOtherBulletForceEraseA; }, [](BulletParam &param, uint8_t value) { param.isHitOtherBulletForceEraseA = value; });
        utBulletParam["isHitOtherBulletForceEraseB"] = sol::property([](BulletParam &param) -> uint8_t { return param.isHitOtherBulletForceEraseB; }, [](BulletParam &param, uint8_t value) { param.isHitOtherBulletForceEraseB = value; });
        utBulletParam["isHitForceMagic"] = sol::property([](BulletParam &param) -> uint8_t { return param.isHitForceMagic; }, [](BulletParam &param, uint8_t value) { param.isHitForceMagic = value; });
        utBulletParam["isIgnoreSfxIfHitWater"] = sol::property([](BulletParam &param) -> uint8_t { return param.isIgnoreSfxIfHitWater; }, [](BulletParam &param, uint8_t value) { param.isIgnoreSfxIfHitWater = value; });
        utBulletParam["isIgnoreMoveStateIfHitWater"] = sol::property([](BulletParam &param) -> uint8_t { return param.isIgnoreMoveStateIfHitWater; }, [](BulletParam &param, uint8_t value) { param.isIgnoreMoveStateIfHitWater = value; });
        utBulletParam["isHitDarkForceMagic"] = sol::property([](BulletParam &param) -> uint8_t { return param.isHitDarkForceMagic; }, [](BulletParam &param, uint8_t value) { param.isHitDarkForceMagic = value; });
        utBulletParam["dmgCalcSide"] = sol::property([](BulletParam &param) -> uint8_t { return param.dmgCalcSide; }, [](BulletParam &param, uint8_t value) { param.dmgCalcSide = value; });
        utBulletParam["isEnableAutoHoming"] = sol::property([](BulletParam &param) -> uint8_t { return param.isEnableAutoHoming; }, [](BulletParam &param, uint8_t value) { param.isEnableAutoHoming = value; });
        utBulletParam["isSyncBulletCulcDumypolyPos"] = sol::property([](BulletParam &param) -> uint8_t { return param.isSyncBulletCulcDumypolyPos; }, [](BulletParam &param, uint8_t value) { param.isSyncBulletCulcDumypolyPos = value; });
        utBulletParam["isOwnerOverrideInitAngle"] = sol::property([](BulletParam &param) -> uint8_t { return param.isOwnerOverrideInitAngle; }, [](BulletParam &param, uint8_t value) { param.isOwnerOverrideInitAngle = value; });
        utBulletParam["isInheritSfxToChild"] = sol::property([](BulletParam &param) -> uint8_t { return param.isInheritSfxToChild; }, [](BulletParam &param, uint8_t value) { param.isInheritSfxToChild = value; });
        utBulletParam["darkDamageDamp"] = &BulletParam::darkDamageDamp;
        utBulletParam["bulletSfxDeleteType_byHit"] = &BulletParam::bulletSfxDeleteType_byHit;
        utBulletParam["bulletSfxDeleteType_byLifeDead"] = &BulletParam::bulletSfxDeleteType_byLifeDead;
        utBulletParam["targetYOffsetRange"] = &BulletParam::targetYOffsetRange;
        utBulletParam["shootAngleYMaxRandom"] = &BulletParam::shootAngleYMaxRandom;
        utBulletParam["shootAngleXMaxRandom"] = &BulletParam::shootAngleXMaxRandom;
        utBulletParam["intervalCreateBulletId"] = &BulletParam::intervalCreateBulletId;
        utBulletParam["intervalCreateTimeMin"] = &BulletParam::intervalCreateTimeMin;
        utBulletParam["intervalCreateTimeMax"] = &BulletParam::intervalCreateTimeMax;
        utBulletParam["predictionShootObserveTime"] = &BulletParam::predictionShootObserveTime;
        utBulletParam["intervalCreateWaitTime"] = &BulletParam::intervalCreateWaitTime;
        utBulletParam["sfxPostureType"] = &BulletParam::sfxPostureType;
        utBulletParam["createLimitGroupId"] = &BulletParam::createLimitGroupId;
        utBulletParam["isInheritSpeedToChild"] = sol::property([](BulletParam &param) -> uint8_t { return param.isInheritSpeedToChild; }, [](BulletParam &param, uint8_t value) { param.isInheritSpeedToChild = value; });
        utBulletParam["isDisableHitSfx_byChrAndObj"] = sol::property([](BulletParam &param) -> uint8_t { return param.isDisableHitSfx_byChrAndObj; }, [](BulletParam &param, uint8_t value) { param.isDisableHitSfx_byChrAndObj = value; });
        utBulletParam["isCheckWall_byCenterRay"] = sol::property([](BulletParam &param) -> uint8_t { return param.isCheckWall_byCenterRay; }, [](BulletParam &param, uint8_t value) { param.isCheckWall_byCenterRay = value; });
        utBulletParam["isHitFlare"] = sol::property([](BulletParam &param) -> uint8_t { return param.isHitFlare; }, [](BulletParam &param, uint8_t value) { param.isHitFlare = value; });
        utBulletParam["isUseBulletWallFilter"] = sol::property([](BulletParam &param) -> uint8_t { return param.isUseBulletWallFilter; }, [](BulletParam &param, uint8_t value) { param.isUseBulletWallFilter = value; });
        utBulletParam["isDisableAiProjectileDodge"] = sol::property([](BulletParam &param) -> uint8_t { return param.isDisableAiProjectileDodge; }, [](BulletParam &param, uint8_t value) { param.isDisableAiProjectileDodge = value; });
        utBulletParam["isNonDependenceMagicForFunnleNum"] = sol::property([](BulletParam &param) -> uint8_t { return param.isNonDependenceMagicForFunnleNum; }, [](BulletParam &param, uint8_t value) { param.isNonDependenceMagicForFunnleNum = value; });
        utBulletParam["isAiInterruptShootNoDamageBullet"] = sol::property([](BulletParam &param) -> uint8_t { return param.isAiInterruptShootNoDamageBullet; }, [](BulletParam &param, uint8_t value) { param.isAiInterruptShootNoDamageBullet = value; });
        utBulletParam["randomCreateRadius"] = &BulletParam::randomCreateRadius;
        utBulletParam["followOffset_BaseHeight"] = &BulletParam::followOffset_BaseHeight;
        utBulletParam["assetNo_Hit"] = &BulletParam::assetNo_Hit;
        utBulletParam["lifeRandomRange"] = &BulletParam::lifeRandomRange;
        utBulletParam["homingAngleX"] = &BulletParam::homingAngleX;
        utBulletParam["ballisticCalcType"] = &BulletParam::ballisticCalcType;
        utBulletParam["attachEffectType"] = &BulletParam::attachEffectType;
        utBulletParam["seId_Bullet1"] = &BulletParam::seId_Bullet1;
        utBulletParam["seId_Bullet2"] = &BulletParam::seId_Bullet2;
        utBulletParam["seId_Hit"] = &BulletParam::seId_Hit;
        utBulletParam["seId_Flick"] = &BulletParam::seId_Flick;
        utBulletParam["howitzerShootAngleXMin"] = &BulletParam::howitzerShootAngleXMin;
        utBulletParam["howitzerShootAngleXMax"] = &BulletParam::howitzerShootAngleXMax;
        utBulletParam["howitzerInitMinVelocity"] = &BulletParam::howitzerInitMinVelocity;
        utBulletParam["howitzerInitMaxVelocity"] = &BulletParam::howitzerInitMaxVelocity;
        utBulletParam["sfxId_ForceErase"] = &BulletParam::sfxId_ForceErase;
        utBulletParam["bulletSfxDeleteType_byForceErase"] = &BulletParam::bulletSfxDeleteType_byForceErase;
        utBulletParam["followDmypoly_forSfxPose"] = &BulletParam::followDmypoly_forSfxPose;
        utBulletParam["followOffset_Radius"] = &BulletParam::followOffset_Radius;
        utBulletParam["spBulletDistUpRate"] = &BulletParam::spBulletDistUpRate;
        utBulletParam["nolockTargetDist"] = &BulletParam::nolockTargetDist;
    };
    auto tableLoader = [delayInit = std::move(delayInit)]() -> auto { delayInit(); return std::make_unique<ParamTableIndexer<BulletParam>>(gParamMgr.findTable(L"BulletParam")); };
    paramsTable["Bullet"] = tableLoader;
}

}
