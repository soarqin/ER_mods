#include "../luabindings.h"
#include "../defs/NpcParam.h"

namespace paramadjuster::params {

void registerNpcParam(sol::state *state, sol::table &paramsTable) {
    auto delayInit = [state, &paramsTable]() {
        if (sol::optional<sol::table> usertype = (*state)["NpcParam"]; usertype) return;
        auto indexerNpcParam = state->new_usertype<ParamTableIndexer<NpcParam>>("NpcParamTableIndexer");
        indexerNpcParam["count"] = sol::property(&ParamTableIndexer<NpcParam>::count);
        indexerNpcParam["__index"] = &ParamTableIndexer<NpcParam>::at;
        indexerNpcParam["id"] = &ParamTableIndexer<NpcParam>::paramId;
        indexerNpcParam["get"] = &ParamTableIndexer<NpcParam>::get;
        auto utNpcParam = state->new_usertype<NpcParam>("NpcParam");
        utNpcParam["disableParam_NT"] = sol::property([](NpcParam &param) -> uint8_t { return param.disableParam_NT; }, [](NpcParam &param, uint8_t value) { param.disableParam_NT = value; });
        utNpcParam["behaviorVariationId"] = &NpcParam::behaviorVariationId;
        utNpcParam["resistCorrectId_poison"] = &NpcParam::resistCorrectId_poison;
        utNpcParam["nameId"] = &NpcParam::nameId;
        utNpcParam["turnVellocity"] = &NpcParam::turnVellocity;
        utNpcParam["hitHeight"] = &NpcParam::hitHeight;
        utNpcParam["hitRadius"] = &NpcParam::hitRadius;
        utNpcParam["weight"] = &NpcParam::weight;
        utNpcParam["hitYOffset"] = &NpcParam::hitYOffset;
        utNpcParam["hp"] = &NpcParam::hp;
        utNpcParam["mp"] = &NpcParam::mp;
        utNpcParam["getSoul"] = &NpcParam::getSoul;
        utNpcParam["itemLotId_enemy"] = &NpcParam::itemLotId_enemy;
        utNpcParam["itemLotId_map"] = &NpcParam::itemLotId_map;
        utNpcParam["maxAnkleRollAngle"] = &NpcParam::maxAnkleRollAngle;
        utNpcParam["chrHitGroupAndNavimesh"] = &NpcParam::chrHitGroupAndNavimesh;
        utNpcParam["faceIconId"] = &NpcParam::faceIconId;
        utNpcParam["deactivateDist"] = &NpcParam::deactivateDist;
        utNpcParam["chrActivateConditionParamId"] = &NpcParam::chrActivateConditionParamId;
        utNpcParam["footIkErrorHeightLimit"] = &NpcParam::footIkErrorHeightLimit;
        utNpcParam["humanityLotId"] = &NpcParam::humanityLotId;
        utNpcParam["spEffectID0"] = &NpcParam::spEffectID0;
        utNpcParam["spEffectID1"] = &NpcParam::spEffectID1;
        utNpcParam["spEffectID2"] = &NpcParam::spEffectID2;
        utNpcParam["spEffectID3"] = &NpcParam::spEffectID3;
        utNpcParam["spEffectID4"] = &NpcParam::spEffectID4;
        utNpcParam["spEffectID5"] = &NpcParam::spEffectID5;
        utNpcParam["spEffectID6"] = &NpcParam::spEffectID6;
        utNpcParam["spEffectID7"] = &NpcParam::spEffectID7;
        utNpcParam["GameClearSpEffectID"] = &NpcParam::GameClearSpEffectID;
        utNpcParam["physGuardCutRate"] = &NpcParam::physGuardCutRate;
        utNpcParam["magGuardCutRate"] = &NpcParam::magGuardCutRate;
        utNpcParam["fireGuardCutRate"] = &NpcParam::fireGuardCutRate;
        utNpcParam["thunGuardCutRate"] = &NpcParam::thunGuardCutRate;
        utNpcParam["animIdOffset"] = &NpcParam::animIdOffset;
        utNpcParam["lockGazePoint0"] = &NpcParam::lockGazePoint0;
        utNpcParam["lockGazePoint1"] = &NpcParam::lockGazePoint1;
        utNpcParam["lockGazePoint2"] = &NpcParam::lockGazePoint2;
        utNpcParam["lockGazePoint3"] = &NpcParam::lockGazePoint3;
        utNpcParam["lockGazePoint4"] = &NpcParam::lockGazePoint4;
        utNpcParam["lockGazePoint5"] = &NpcParam::lockGazePoint5;
        utNpcParam["networkWarpDist"] = &NpcParam::networkWarpDist;
        utNpcParam["dbgBehaviorR1"] = &NpcParam::dbgBehaviorR1;
        utNpcParam["dbgBehaviorL1"] = &NpcParam::dbgBehaviorL1;
        utNpcParam["dbgBehaviorR2"] = &NpcParam::dbgBehaviorR2;
        utNpcParam["dbgBehaviorL2"] = &NpcParam::dbgBehaviorL2;
        utNpcParam["dbgBehaviorRL"] = &NpcParam::dbgBehaviorRL;
        utNpcParam["dbgBehaviorRR"] = &NpcParam::dbgBehaviorRR;
        utNpcParam["dbgBehaviorRD"] = &NpcParam::dbgBehaviorRD;
        utNpcParam["dbgBehaviorRU"] = &NpcParam::dbgBehaviorRU;
        utNpcParam["dbgBehaviorLL"] = &NpcParam::dbgBehaviorLL;
        utNpcParam["dbgBehaviorLR"] = &NpcParam::dbgBehaviorLR;
        utNpcParam["dbgBehaviorLD"] = &NpcParam::dbgBehaviorLD;
        utNpcParam["dbgBehaviorLU"] = &NpcParam::dbgBehaviorLU;
        utNpcParam["animIdOffset2"] = &NpcParam::animIdOffset2;
        utNpcParam["partsDamageRate1"] = &NpcParam::partsDamageRate1;
        utNpcParam["partsDamageRate2"] = &NpcParam::partsDamageRate2;
        utNpcParam["partsDamageRate3"] = &NpcParam::partsDamageRate3;
        utNpcParam["partsDamageRate4"] = &NpcParam::partsDamageRate4;
        utNpcParam["partsDamageRate5"] = &NpcParam::partsDamageRate5;
        utNpcParam["partsDamageRate6"] = &NpcParam::partsDamageRate6;
        utNpcParam["partsDamageRate7"] = &NpcParam::partsDamageRate7;
        utNpcParam["partsDamageRate8"] = &NpcParam::partsDamageRate8;
        utNpcParam["weakPartsDamageRate"] = &NpcParam::weakPartsDamageRate;
        utNpcParam["superArmorRecoverCorrection"] = &NpcParam::superArmorRecoverCorrection;
        utNpcParam["superArmorBrakeKnockbackDist"] = &NpcParam::superArmorBrakeKnockbackDist;
        utNpcParam["stamina"] = &NpcParam::stamina;
        utNpcParam["staminaRecoverBaseVel"] = &NpcParam::staminaRecoverBaseVel;
        utNpcParam["def_phys"] = &NpcParam::def_phys;
        utNpcParam["def_slash"] = &NpcParam::def_slash;
        utNpcParam["def_blow"] = &NpcParam::def_blow;
        utNpcParam["def_thrust"] = &NpcParam::def_thrust;
        utNpcParam["def_mag"] = &NpcParam::def_mag;
        utNpcParam["def_fire"] = &NpcParam::def_fire;
        utNpcParam["def_thunder"] = &NpcParam::def_thunder;
        utNpcParam["defFlickPower"] = &NpcParam::defFlickPower;
        utNpcParam["resist_poison"] = &NpcParam::resist_poison;
        utNpcParam["resist_desease"] = &NpcParam::resist_desease;
        utNpcParam["resist_blood"] = &NpcParam::resist_blood;
        utNpcParam["resist_curse"] = &NpcParam::resist_curse;
        utNpcParam["ghostModelId"] = &NpcParam::ghostModelId;
        utNpcParam["normalChangeResouceId"] = &NpcParam::normalChangeResouceId;
        utNpcParam["guardAngle"] = &NpcParam::guardAngle;
        utNpcParam["slashGuardCutRate"] = &NpcParam::slashGuardCutRate;
        utNpcParam["blowGuardCutRate"] = &NpcParam::blowGuardCutRate;
        utNpcParam["thrustGuardCutRate"] = &NpcParam::thrustGuardCutRate;
        utNpcParam["lockGazePoint6"] = &NpcParam::lockGazePoint6;
        utNpcParam["normalChangeTexChrId"] = &NpcParam::normalChangeTexChrId;
        utNpcParam["dropType"] = &NpcParam::dropType;
        utNpcParam["knockbackRate"] = &NpcParam::knockbackRate;
        utNpcParam["knockbackParamId"] = &NpcParam::knockbackParamId;
        utNpcParam["fallDamageDump"] = &NpcParam::fallDamageDump;
        utNpcParam["staminaGuardDef"] = &NpcParam::staminaGuardDef;
        utNpcParam["resist_sleep"] = &NpcParam::resist_sleep;
        utNpcParam["resist_madness"] = &NpcParam::resist_madness;
        utNpcParam["sleepGuardResist"] = &NpcParam::sleepGuardResist;
        utNpcParam["madnessGuardResist"] = &NpcParam::madnessGuardResist;
        utNpcParam["lockGazePoint7"] = &NpcParam::lockGazePoint7;
        utNpcParam["mpRecoverBaseVel"] = &NpcParam::mpRecoverBaseVel;
        utNpcParam["flickDamageCutRate"] = &NpcParam::flickDamageCutRate;
        utNpcParam["defaultLodParamId"] = &NpcParam::defaultLodParamId;
        utNpcParam["drawType"] = &NpcParam::drawType;
        utNpcParam["npcType"] = &NpcParam::npcType;
        utNpcParam["teamType"] = &NpcParam::teamType;
        utNpcParam["moveType"] = &NpcParam::moveType;
        utNpcParam["lockDist"] = &NpcParam::lockDist;
        utNpcParam["materialSe_Weak1"] = &NpcParam::materialSe_Weak1;
        utNpcParam["materialSfx_Weak1"] = &NpcParam::materialSfx_Weak1;
        utNpcParam["partsDamageType"] = &NpcParam::partsDamageType;
        utNpcParam["vowType"] = &NpcParam::vowType;
        utNpcParam["guardLevel"] = &NpcParam::guardLevel;
        utNpcParam["burnSfxType"] = &NpcParam::burnSfxType;
        utNpcParam["poisonGuardResist"] = &NpcParam::poisonGuardResist;
        utNpcParam["diseaseGuardResist"] = &NpcParam::diseaseGuardResist;
        utNpcParam["bloodGuardResist"] = &NpcParam::bloodGuardResist;
        utNpcParam["curseGuardResist"] = &NpcParam::curseGuardResist;
        utNpcParam["parryAttack"] = &NpcParam::parryAttack;
        utNpcParam["parryDefence"] = &NpcParam::parryDefence;
        utNpcParam["sfxSize"] = &NpcParam::sfxSize;
        utNpcParam["pushOutCamRegionRadius"] = &NpcParam::pushOutCamRegionRadius;
        utNpcParam["hitStopType"] = &NpcParam::hitStopType;
        utNpcParam["ladderEndChkOffsetTop"] = &NpcParam::ladderEndChkOffsetTop;
        utNpcParam["ladderEndChkOffsetLow"] = &NpcParam::ladderEndChkOffsetLow;
        utNpcParam["useRagdollCamHit"] = sol::property([](NpcParam &param) -> uint8_t { return param.useRagdollCamHit; }, [](NpcParam &param, uint8_t value) { param.useRagdollCamHit = value; });
        utNpcParam["disableClothRigidHit"] = sol::property([](NpcParam &param) -> uint8_t { return param.disableClothRigidHit; }, [](NpcParam &param, uint8_t value) { param.disableClothRigidHit = value; });
        utNpcParam["useUndulationAddAnimFB"] = sol::property([](NpcParam &param) -> uint8_t { return param.useUndulationAddAnimFB; }, [](NpcParam &param, uint8_t value) { param.useUndulationAddAnimFB = value; });
        utNpcParam["isWeakA"] = sol::property([](NpcParam &param) -> uint8_t { return param.isWeakA; }, [](NpcParam &param, uint8_t value) { param.isWeakA = value; });
        utNpcParam["isGhost"] = sol::property([](NpcParam &param) -> uint8_t { return param.isGhost; }, [](NpcParam &param, uint8_t value) { param.isGhost = value; });
        utNpcParam["isNoDamageMotion"] = sol::property([](NpcParam &param) -> uint8_t { return param.isNoDamageMotion; }, [](NpcParam &param, uint8_t value) { param.isNoDamageMotion = value; });
        utNpcParam["isUnduration"] = sol::property([](NpcParam &param) -> uint8_t { return param.isUnduration; }, [](NpcParam &param, uint8_t value) { param.isUnduration = value; });
        utNpcParam["isChangeWanderGhost"] = sol::property([](NpcParam &param) -> uint8_t { return param.isChangeWanderGhost; }, [](NpcParam &param, uint8_t value) { param.isChangeWanderGhost = value; });
        utNpcParam["modelDispMask0"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask0; }, [](NpcParam &param, uint8_t value) { param.modelDispMask0 = value; });
        utNpcParam["modelDispMask1"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask1; }, [](NpcParam &param, uint8_t value) { param.modelDispMask1 = value; });
        utNpcParam["modelDispMask2"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask2; }, [](NpcParam &param, uint8_t value) { param.modelDispMask2 = value; });
        utNpcParam["modelDispMask3"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask3; }, [](NpcParam &param, uint8_t value) { param.modelDispMask3 = value; });
        utNpcParam["modelDispMask4"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask4; }, [](NpcParam &param, uint8_t value) { param.modelDispMask4 = value; });
        utNpcParam["modelDispMask5"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask5; }, [](NpcParam &param, uint8_t value) { param.modelDispMask5 = value; });
        utNpcParam["modelDispMask6"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask6; }, [](NpcParam &param, uint8_t value) { param.modelDispMask6 = value; });
        utNpcParam["modelDispMask7"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask7; }, [](NpcParam &param, uint8_t value) { param.modelDispMask7 = value; });
        utNpcParam["modelDispMask8"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask8; }, [](NpcParam &param, uint8_t value) { param.modelDispMask8 = value; });
        utNpcParam["modelDispMask9"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask9; }, [](NpcParam &param, uint8_t value) { param.modelDispMask9 = value; });
        utNpcParam["modelDispMask10"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask10; }, [](NpcParam &param, uint8_t value) { param.modelDispMask10 = value; });
        utNpcParam["modelDispMask11"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask11; }, [](NpcParam &param, uint8_t value) { param.modelDispMask11 = value; });
        utNpcParam["modelDispMask12"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask12; }, [](NpcParam &param, uint8_t value) { param.modelDispMask12 = value; });
        utNpcParam["modelDispMask13"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask13; }, [](NpcParam &param, uint8_t value) { param.modelDispMask13 = value; });
        utNpcParam["modelDispMask14"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask14; }, [](NpcParam &param, uint8_t value) { param.modelDispMask14 = value; });
        utNpcParam["modelDispMask15"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask15; }, [](NpcParam &param, uint8_t value) { param.modelDispMask15 = value; });
        utNpcParam["isEnableNeckTurn"] = sol::property([](NpcParam &param) -> uint8_t { return param.isEnableNeckTurn; }, [](NpcParam &param, uint8_t value) { param.isEnableNeckTurn = value; });
        utNpcParam["disableRespawn"] = sol::property([](NpcParam &param) -> uint8_t { return param.disableRespawn; }, [](NpcParam &param, uint8_t value) { param.disableRespawn = value; });
        utNpcParam["isMoveAnimWait"] = sol::property([](NpcParam &param) -> uint8_t { return param.isMoveAnimWait; }, [](NpcParam &param, uint8_t value) { param.isMoveAnimWait = value; });
        utNpcParam["isCrowd"] = sol::property([](NpcParam &param) -> uint8_t { return param.isCrowd; }, [](NpcParam &param, uint8_t value) { param.isCrowd = value; });
        utNpcParam["isWeakB"] = sol::property([](NpcParam &param) -> uint8_t { return param.isWeakB; }, [](NpcParam &param, uint8_t value) { param.isWeakB = value; });
        utNpcParam["isWeakC"] = sol::property([](NpcParam &param) -> uint8_t { return param.isWeakC; }, [](NpcParam &param, uint8_t value) { param.isWeakC = value; });
        utNpcParam["isWeakD"] = sol::property([](NpcParam &param) -> uint8_t { return param.isWeakD; }, [](NpcParam &param, uint8_t value) { param.isWeakD = value; });
        utNpcParam["doesAlwaysUseSpecialTurn"] = sol::property([](NpcParam &param) -> uint8_t { return param.doesAlwaysUseSpecialTurn; }, [](NpcParam &param, uint8_t value) { param.doesAlwaysUseSpecialTurn = value; });
        utNpcParam["isRideAtkTarget"] = sol::property([](NpcParam &param) -> uint8_t { return param.isRideAtkTarget; }, [](NpcParam &param, uint8_t value) { param.isRideAtkTarget = value; });
        utNpcParam["isEnableStepDispInterpolate"] = sol::property([](NpcParam &param) -> uint8_t { return param.isEnableStepDispInterpolate; }, [](NpcParam &param, uint8_t value) { param.isEnableStepDispInterpolate = value; });
        utNpcParam["isStealthTarget"] = sol::property([](NpcParam &param) -> uint8_t { return param.isStealthTarget; }, [](NpcParam &param, uint8_t value) { param.isStealthTarget = value; });
        utNpcParam["disableInitializeDead"] = sol::property([](NpcParam &param) -> uint8_t { return param.disableInitializeDead; }, [](NpcParam &param, uint8_t value) { param.disableInitializeDead = value; });
        utNpcParam["isHitRumble"] = sol::property([](NpcParam &param) -> uint8_t { return param.isHitRumble; }, [](NpcParam &param, uint8_t value) { param.isHitRumble = value; });
        utNpcParam["isSmoothTurn"] = sol::property([](NpcParam &param) -> uint8_t { return param.isSmoothTurn; }, [](NpcParam &param, uint8_t value) { param.isSmoothTurn = value; });
        utNpcParam["isWeakE"] = sol::property([](NpcParam &param) -> uint8_t { return param.isWeakE; }, [](NpcParam &param, uint8_t value) { param.isWeakE = value; });
        utNpcParam["isWeakF"] = sol::property([](NpcParam &param) -> uint8_t { return param.isWeakF; }, [](NpcParam &param, uint8_t value) { param.isWeakF = value; });
        utNpcParam["modelDispMask16"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask16; }, [](NpcParam &param, uint8_t value) { param.modelDispMask16 = value; });
        utNpcParam["modelDispMask17"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask17; }, [](NpcParam &param, uint8_t value) { param.modelDispMask17 = value; });
        utNpcParam["modelDispMask18"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask18; }, [](NpcParam &param, uint8_t value) { param.modelDispMask18 = value; });
        utNpcParam["modelDispMask19"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask19; }, [](NpcParam &param, uint8_t value) { param.modelDispMask19 = value; });
        utNpcParam["modelDispMask20"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask20; }, [](NpcParam &param, uint8_t value) { param.modelDispMask20 = value; });
        utNpcParam["modelDispMask21"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask21; }, [](NpcParam &param, uint8_t value) { param.modelDispMask21 = value; });
        utNpcParam["modelDispMask22"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask22; }, [](NpcParam &param, uint8_t value) { param.modelDispMask22 = value; });
        utNpcParam["modelDispMask23"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask23; }, [](NpcParam &param, uint8_t value) { param.modelDispMask23 = value; });
        utNpcParam["modelDispMask24"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask24; }, [](NpcParam &param, uint8_t value) { param.modelDispMask24 = value; });
        utNpcParam["modelDispMask25"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask25; }, [](NpcParam &param, uint8_t value) { param.modelDispMask25 = value; });
        utNpcParam["modelDispMask26"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask26; }, [](NpcParam &param, uint8_t value) { param.modelDispMask26 = value; });
        utNpcParam["modelDispMask27"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask27; }, [](NpcParam &param, uint8_t value) { param.modelDispMask27 = value; });
        utNpcParam["modelDispMask28"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask28; }, [](NpcParam &param, uint8_t value) { param.modelDispMask28 = value; });
        utNpcParam["modelDispMask29"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask29; }, [](NpcParam &param, uint8_t value) { param.modelDispMask29 = value; });
        utNpcParam["modelDispMask30"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask30; }, [](NpcParam &param, uint8_t value) { param.modelDispMask30 = value; });
        utNpcParam["modelDispMask31"] = sol::property([](NpcParam &param) -> uint8_t { return param.modelDispMask31; }, [](NpcParam &param, uint8_t value) { param.modelDispMask31 = value; });
        utNpcParam["itemSearchRadius"] = &NpcParam::itemSearchRadius;
        utNpcParam["chrHitHeight"] = &NpcParam::chrHitHeight;
        utNpcParam["chrHitRadius"] = &NpcParam::chrHitRadius;
        utNpcParam["specialTurnType"] = &NpcParam::specialTurnType;
        utNpcParam["isSoulGetByBoss"] = sol::property([](NpcParam &param) -> uint8_t { return param.isSoulGetByBoss; }, [](NpcParam &param, uint8_t value) { param.isSoulGetByBoss = value; });
        utNpcParam["isBulletOwner_byObject"] = sol::property([](NpcParam &param) -> uint8_t { return param.isBulletOwner_byObject; }, [](NpcParam &param, uint8_t value) { param.isBulletOwner_byObject = value; });
        utNpcParam["isUseLowHitFootIk"] = sol::property([](NpcParam &param) -> uint8_t { return param.isUseLowHitFootIk; }, [](NpcParam &param, uint8_t value) { param.isUseLowHitFootIk = value; });
        utNpcParam["isCalculatePvPDamage"] = sol::property([](NpcParam &param) -> uint8_t { return param.isCalculatePvPDamage; }, [](NpcParam &param, uint8_t value) { param.isCalculatePvPDamage = value; });
        utNpcParam["isHostSyncChr"] = sol::property([](NpcParam &param) -> uint8_t { return param.isHostSyncChr; }, [](NpcParam &param, uint8_t value) { param.isHostSyncChr = value; });
        utNpcParam["isSkipWeakDamageAnim"] = sol::property([](NpcParam &param) -> uint8_t { return param.isSkipWeakDamageAnim; }, [](NpcParam &param, uint8_t value) { param.isSkipWeakDamageAnim = value; });
        utNpcParam["isKeepHitOnRide"] = sol::property([](NpcParam &param) -> uint8_t { return param.isKeepHitOnRide; }, [](NpcParam &param, uint8_t value) { param.isKeepHitOnRide = value; });
        utNpcParam["isSpCollide"] = sol::property([](NpcParam &param) -> uint8_t { return param.isSpCollide; }, [](NpcParam &param, uint8_t value) { param.isSpCollide = value; });
        utNpcParam["def_dark"] = &NpcParam::def_dark;
        utNpcParam["threatLv"] = &NpcParam::threatLv;
        utNpcParam["specialTurnDistanceThreshold"] = &NpcParam::specialTurnDistanceThreshold;
        utNpcParam["autoFootEffectSfxId"] = &NpcParam::autoFootEffectSfxId;
        utNpcParam["materialSe1"] = &NpcParam::materialSe1;
        utNpcParam["materialSfx1"] = &NpcParam::materialSfx1;
        utNpcParam["materialSe_Weak2"] = &NpcParam::materialSe_Weak2;
        utNpcParam["materialSfx_Weak2"] = &NpcParam::materialSfx_Weak2;
        utNpcParam["materialSe2"] = &NpcParam::materialSe2;
        utNpcParam["materialSfx2"] = &NpcParam::materialSfx2;
        utNpcParam["spEffectID8"] = &NpcParam::spEffectID8;
        utNpcParam["spEffectID9"] = &NpcParam::spEffectID9;
        utNpcParam["spEffectID10"] = &NpcParam::spEffectID10;
        utNpcParam["spEffectID11"] = &NpcParam::spEffectID11;
        utNpcParam["spEffectID12"] = &NpcParam::spEffectID12;
        utNpcParam["spEffectID13"] = &NpcParam::spEffectID13;
        utNpcParam["spEffectID14"] = &NpcParam::spEffectID14;
        utNpcParam["spEffectID15"] = &NpcParam::spEffectID15;
        utNpcParam["autoFootEffectDecalBaseId1"] = &NpcParam::autoFootEffectDecalBaseId1;
        utNpcParam["toughness"] = &NpcParam::toughness;
        utNpcParam["toughnessRecoverCorrection"] = &NpcParam::toughnessRecoverCorrection;
        utNpcParam["neutralDamageCutRate"] = &NpcParam::neutralDamageCutRate;
        utNpcParam["slashDamageCutRate"] = &NpcParam::slashDamageCutRate;
        utNpcParam["blowDamageCutRate"] = &NpcParam::blowDamageCutRate;
        utNpcParam["thrustDamageCutRate"] = &NpcParam::thrustDamageCutRate;
        utNpcParam["magicDamageCutRate"] = &NpcParam::magicDamageCutRate;
        utNpcParam["fireDamageCutRate"] = &NpcParam::fireDamageCutRate;
        utNpcParam["thunderDamageCutRate"] = &NpcParam::thunderDamageCutRate;
        utNpcParam["darkDamageCutRate"] = &NpcParam::darkDamageCutRate;
        utNpcParam["darkGuardCutRate"] = &NpcParam::darkGuardCutRate;
        utNpcParam["clothUpdateOffset"] = &NpcParam::clothUpdateOffset;
        utNpcParam["npcPlayerWeightType"] = &NpcParam::npcPlayerWeightType;
        utNpcParam["normalChangeModelId"] = &NpcParam::normalChangeModelId;
        utNpcParam["normalChangeAnimChrId"] = &NpcParam::normalChangeAnimChrId;
        utNpcParam["paintRenderTargetSize"] = &NpcParam::paintRenderTargetSize;
        utNpcParam["resistCorrectId_disease"] = &NpcParam::resistCorrectId_disease;
        utNpcParam["phantomShaderId"] = &NpcParam::phantomShaderId;
        utNpcParam["multiPlayCorrectionParamId"] = &NpcParam::multiPlayCorrectionParamId;
        utNpcParam["maxAnklePitchAngle"] = &NpcParam::maxAnklePitchAngle;
        utNpcParam["resist_freeze"] = &NpcParam::resist_freeze;
        utNpcParam["freezeGuardResist"] = &NpcParam::freezeGuardResist;
        utNpcParam["hpBurnDamageRate"] = &NpcParam::hpBurnDamageRate;
        utNpcParam["lockCameraParamId"] = &NpcParam::lockCameraParamId;
        utNpcParam["spEffectID16"] = &NpcParam::spEffectID16;
        utNpcParam["spEffectID17"] = &NpcParam::spEffectID17;
        utNpcParam["spEffectID18"] = &NpcParam::spEffectID18;
        utNpcParam["spEffectID19"] = &NpcParam::spEffectID19;
        utNpcParam["spEffectID20"] = &NpcParam::spEffectID20;
        utNpcParam["spEffectID21"] = &NpcParam::spEffectID21;
        utNpcParam["spEffectID22"] = &NpcParam::spEffectID22;
        utNpcParam["spEffectID23"] = &NpcParam::spEffectID23;
        utNpcParam["spEffectID24"] = &NpcParam::spEffectID24;
        utNpcParam["spEffectID25"] = &NpcParam::spEffectID25;
        utNpcParam["spEffectID26"] = &NpcParam::spEffectID26;
        utNpcParam["spEffectID27"] = &NpcParam::spEffectID27;
        utNpcParam["spEffectID28"] = &NpcParam::spEffectID28;
        utNpcParam["spEffectID29"] = &NpcParam::spEffectID29;
        utNpcParam["spEffectID30"] = &NpcParam::spEffectID30;
        utNpcParam["spEffectID31"] = &NpcParam::spEffectID31;
        utNpcParam["disableLockOnAng"] = &NpcParam::disableLockOnAng;
        utNpcParam["clothOffLodLevel"] = &NpcParam::clothOffLodLevel;
        utNpcParam["isUseFootIKNormalByUnduration"] = sol::property([](NpcParam &param) -> uint8_t { return param.isUseFootIKNormalByUnduration; }, [](NpcParam &param, uint8_t value) { param.isUseFootIKNormalByUnduration = value; });
        utNpcParam["attachHitInitializeDead"] = sol::property([](NpcParam &param) -> uint8_t { return param.attachHitInitializeDead; }, [](NpcParam &param, uint8_t value) { param.attachHitInitializeDead = value; });
        utNpcParam["excludeGroupRewardCheck"] = sol::property([](NpcParam &param) -> uint8_t { return param.excludeGroupRewardCheck; }, [](NpcParam &param, uint8_t value) { param.excludeGroupRewardCheck = value; });
        utNpcParam["enableAILockDmyPoly_212"] = sol::property([](NpcParam &param) -> uint8_t { return param.enableAILockDmyPoly_212; }, [](NpcParam &param, uint8_t value) { param.enableAILockDmyPoly_212 = value; });
        utNpcParam["enableAILockDmyPoly_213"] = sol::property([](NpcParam &param) -> uint8_t { return param.enableAILockDmyPoly_213; }, [](NpcParam &param, uint8_t value) { param.enableAILockDmyPoly_213 = value; });
        utNpcParam["enableAILockDmyPoly_214"] = sol::property([](NpcParam &param) -> uint8_t { return param.enableAILockDmyPoly_214; }, [](NpcParam &param, uint8_t value) { param.enableAILockDmyPoly_214 = value; });
        utNpcParam["disableActivateOpen_xb1"] = sol::property([](NpcParam &param) -> uint8_t { return param.disableActivateOpen_xb1; }, [](NpcParam &param, uint8_t value) { param.disableActivateOpen_xb1 = value; });
        utNpcParam["disableActivateLegacy_xb1"] = sol::property([](NpcParam &param) -> uint8_t { return param.disableActivateLegacy_xb1; }, [](NpcParam &param, uint8_t value) { param.disableActivateLegacy_xb1 = value; });
        utNpcParam["estusFlaskRecoveryParamId"] = &NpcParam::estusFlaskRecoveryParamId;
        utNpcParam["roleNameId"] = &NpcParam::roleNameId;
        utNpcParam["estusFlaskLotPoint"] = &NpcParam::estusFlaskLotPoint;
        utNpcParam["hpEstusFlaskLotPoint"] = &NpcParam::hpEstusFlaskLotPoint;
        utNpcParam["mpEstusFlaskLotPoint"] = &NpcParam::mpEstusFlaskLotPoint;
        utNpcParam["estusFlaskRecovery_failedLotPointAdd"] = &NpcParam::estusFlaskRecovery_failedLotPointAdd;
        utNpcParam["hpEstusFlaskRecovery_failedLotPointAdd"] = &NpcParam::hpEstusFlaskRecovery_failedLotPointAdd;
        utNpcParam["mpEstusFlaskRecovery_failedLotPointAdd"] = &NpcParam::mpEstusFlaskRecovery_failedLotPointAdd;
        utNpcParam["WanderGhostPhantomId"] = &NpcParam::WanderGhostPhantomId;
        utNpcParam["hearingHeadSize"] = &NpcParam::hearingHeadSize;
        utNpcParam["SoundBankId"] = &NpcParam::SoundBankId;
        utNpcParam["forwardUndulationLimit"] = &NpcParam::forwardUndulationLimit;
        utNpcParam["sideUndulationLimit"] = &NpcParam::sideUndulationLimit;
        utNpcParam["deactiveMoveSpeed"] = &NpcParam::deactiveMoveSpeed;
        utNpcParam["deactiveMoveDist"] = &NpcParam::deactiveMoveDist;
        utNpcParam["enableSoundObjDist"] = &NpcParam::enableSoundObjDist;
        utNpcParam["undulationCorrectGain"] = &NpcParam::undulationCorrectGain;
        utNpcParam["autoFootEffectDecalBaseId2"] = &NpcParam::autoFootEffectDecalBaseId2;
        utNpcParam["autoFootEffectDecalBaseId3"] = &NpcParam::autoFootEffectDecalBaseId3;
        utNpcParam["RetargetReferenceChrId"] = &NpcParam::RetargetReferenceChrId;
        utNpcParam["SfxResBankId"] = &NpcParam::SfxResBankId;
        utNpcParam["updateActivatePriolity"] = &NpcParam::updateActivatePriolity;
        utNpcParam["chrNavimeshFlag_Alive"] = &NpcParam::chrNavimeshFlag_Alive;
        utNpcParam["chrNavimeshFlag_Dead"] = &NpcParam::chrNavimeshFlag_Dead;
        utNpcParam["isConsideredUndead"] = &NpcParam::isConsideredUndead;
        utNpcParam["wheelRotType"] = &NpcParam::wheelRotType;
        utNpcParam["wheelRotRadius"] = &NpcParam::wheelRotRadius;
        utNpcParam["retargetMoveRate"] = &NpcParam::retargetMoveRate;
        utNpcParam["ladderWarpOffset"] = &NpcParam::ladderWarpOffset;
        utNpcParam["loadAssetId"] = &NpcParam::loadAssetId;
        utNpcParam["overlapCameraDmypolyId"] = &NpcParam::overlapCameraDmypolyId;
        utNpcParam["residentMaterialExParamId00"] = &NpcParam::residentMaterialExParamId00;
        utNpcParam["residentMaterialExParamId01"] = &NpcParam::residentMaterialExParamId01;
        utNpcParam["residentMaterialExParamId02"] = &NpcParam::residentMaterialExParamId02;
        utNpcParam["residentMaterialExParamId03"] = &NpcParam::residentMaterialExParamId03;
        utNpcParam["residentMaterialExParamId04"] = &NpcParam::residentMaterialExParamId04;
        utNpcParam["sleepCollectorItemLotId_enemy"] = &NpcParam::sleepCollectorItemLotId_enemy;
        utNpcParam["sleepCollectorItemLotId_map"] = &NpcParam::sleepCollectorItemLotId_map;
        utNpcParam["footIkErrorOnGain"] = &NpcParam::footIkErrorOnGain;
        utNpcParam["footIkErrorOffGain"] = &NpcParam::footIkErrorOffGain;
        utNpcParam["SoundAddBankId"] = &NpcParam::SoundAddBankId;
        utNpcParam["materialVariationValue"] = &NpcParam::materialVariationValue;
        utNpcParam["materialVariationValue_Weak"] = &NpcParam::materialVariationValue_Weak;
        utNpcParam["superArmorDurability"] = &NpcParam::superArmorDurability;
        utNpcParam["saRecoveryRate"] = &NpcParam::saRecoveryRate;
        utNpcParam["saGuardCutRate"] = &NpcParam::saGuardCutRate;
        utNpcParam["resistCorrectId_blood"] = &NpcParam::resistCorrectId_blood;
        utNpcParam["resistCorrectId_curse"] = &NpcParam::resistCorrectId_curse;
        utNpcParam["resistCorrectId_freeze"] = &NpcParam::resistCorrectId_freeze;
        utNpcParam["resistCorrectId_sleep"] = &NpcParam::resistCorrectId_sleep;
        utNpcParam["resistCorrectId_madness"] = &NpcParam::resistCorrectId_madness;
        utNpcParam["chrDeadTutorialFlagId"] = &NpcParam::chrDeadTutorialFlagId;
        utNpcParam["stepDispInterpolateTime"] = &NpcParam::stepDispInterpolateTime;
        utNpcParam["stepDispInterpolateTriggerValue"] = &NpcParam::stepDispInterpolateTriggerValue;
        utNpcParam["lockScoreOffset"] = &NpcParam::lockScoreOffset;
        utNpcParam["dlcGameClearSpEffectID"] = &NpcParam::dlcGameClearSpEffectID;
    };
    auto tableLoader = [delayInit = std::move(delayInit)]() -> auto { delayInit(); return std::make_unique<ParamTableIndexer<NpcParam>>(gParamMgr.findTable(L"NpcParam")); };
    paramsTable["NpcParam"] = tableLoader;
}

}
